name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: ["**"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"

      - name: Install dependencies
        run: |
          echo "yarn version:"
          yarn --version
          echo "node version:"
          node --version
          yarn install --frozen-lockfile --ignore-optional

      - name: Lint
        run: yarn lint

      - name: Format check
        run: yarn format

      - name: Detect unused dependencies
        run: yarn depcheck

      - name: Build
        run: yarn build

      - name: Setup .env file
        run: cat .env.example > .env

      - name: Start Docker Compose services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d --build

      - name: Reset database
        run: docker compose exec -T -e NODE_OPTIONS="--max-old-space-size=1024" tbtc-relayer-dev npx prisma migrate reset --force --skip-seed

      - name: Wait for services to become healthy
        run: .github/scripts/wait-for-healthy-services.sh
        shell: bash

      - name: Run tests
        run: yarn test:coverage

      - name: Stop Docker Compose services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml down

      - name: Upload coverage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
