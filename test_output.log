yarn run v1.22.22
warning ../../../../package.json: No license field
$ jest --runInBand
npm warn Unknown env config "version-commit-hooks". This will stop working in the next major version of npm.
npm warn Unknown env config "always-auth". This will stop working in the next major version of npm.
npm warn Unknown env config "version-tag-prefix". This will stop working in the next major version of npm.
npm warn Unknown env config "version-git-message". This will stop working in the next major version of npm.
npm warn Unknown env config "argv". This will stop working in the next major version of npm.
npm warn Unknown env config "version-git-tag". This will stop working in the next major version of npm.
npm warn Unknown user config "node_gyp". This will stop working in the next major version of npm.
npm warn Unknown user config "always-auth". This will stop working in the next major version of npm.
Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Datasource "db": PostgreSQL database "tbtc_relayer", schema "public" at "localhost:5432"

The PostgreSQL database "tbtc_relayer" schema "public" at "localhost:5432" was successfully reset.

🚀  Your database is now in sync with your Prisma schema. Done in 57ms

Running generate... (Use --skip-generate to skip the generators)
[2K[1A[2K[GRunning generate... - Prisma Client
[2K[1A[2K[G✔ Generated Prisma Client (v6.8.2) to ./node_modules/@prisma/client in 59ms
✔ Generated Prisma Client (v6.8.2) to ./node_modules/@prisma/client-test in 51m
s

  console.log
    [tests/setup.ts] Mocking WormholeVaaService CLASS. USE_REAL_WORMHOLE_SERVICE is not true.

      at Object.<anonymous> (tests/setup.ts:27:11)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:88:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:133:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:183:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:219:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:259:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:316:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0x1111111111111111111111111111111111111111111111111111111111111111. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:361:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0x2222222222222222222222222222222222222222222222222222222222222222. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:399:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.warn
    Skipping VAA emitter chain mismatch test for L2 chain Sui as specific check may not apply.

      419 |     // Skip this test if L2 is Sui or Avax as the specific emitter chain check might not apply or behave differently
      420 |     if (scenario.l2ChainId === L2_CHAIN_ID_SUI || scenario.l2ChainId === L2_CHAIN_ID_AVAX) {
    > 421 |       console.warn(
          |               ^
      422 |         `Skipping VAA emitter chain mismatch test for L2 chain ${scenario.l2ChainName} as specific check may not apply.`,
      423 |       );
      424 |       return;

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:421:15)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:88:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:133:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:183:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:219:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:259:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:316:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0x1111111111111111111111111111111111111111111111111111111111111111. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:361:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0x2222222222222222222222222222222222222222222222222222222222222222. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:399:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.warn
    Skipping VAA emitter chain mismatch test for L2 chain Avalanche as specific check may not apply.

      419 |     // Skip this test if L2 is Sui or Avax as the specific emitter chain check might not apply or behave differently
      420 |     if (scenario.l2ChainId === L2_CHAIN_ID_SUI || scenario.l2ChainId === L2_CHAIN_ID_AVAX) {
    > 421 |       console.warn(
          |               ^
      422 |         `Skipping VAA emitter chain mismatch test for L2 chain ${scenario.l2ChainName} as specific check may not apply.`,
      423 |       );
      424 |       return;

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:421:15)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:88:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:133:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:183:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:219:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:259:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:316:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0x1111111111111111111111111111111111111111111111111111111111111111. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:361:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0x2222222222222222222222222222222222222222222222222222222222222222. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:399:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.warn
    Skipping VAA emitter chain mismatch test for L2 chain Sui as specific check may not apply.

      419 |     // Skip this test if L2 is Sui or Avax as the specific emitter chain check might not apply or behave differently
      420 |     if (scenario.l2ChainId === L2_CHAIN_ID_SUI || scenario.l2ChainId === L2_CHAIN_ID_AVAX) {
    > 421 |       console.warn(
          |               ^
      422 |         `Skipping VAA emitter chain mismatch test for L2 chain ${scenario.l2ChainName} as specific check may not apply.`,
      423 |       );
      424 |       return;

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:421:15)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:88:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:133:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:183:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:219:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:259:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:316:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0x1111111111111111111111111111111111111111111111111111111111111111. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:361:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.log
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] Called for L2 Tx: 0x2222222222222222222222222222222222222222222222222222222222222222. this.wh is undefined

      at Object.<anonymous> (tests/setup.ts:44:21)

  console.error
    [GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.

      48 |             );
      49 |             if (!(this as any).wh) {
    > 50 |               console.error(
         |                       ^
      51 |                 '[GLOBAL MOCK WormholeVaaService.create().fetchAndVerifyVaaForL2Event] CRITICAL: this.wh is undefined.',
      52 |               );
      53 |             }

      at Object.<anonymous> (tests/setup.ts:50:23)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:399:34)

  console.error
    [wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class EvmAddress] { byteSize: 20, platform: 'Evm' },
      Platform: [class EvmPlatform extends PlatformContext] { _platform: 'Evm' },
      getSigner: [AsyncFunction: getEvmSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        PorticoBridge: [Function: PorticoBridge],
        CircleBridge: [Function: CircleBridge],
        TBTCBridge: [Function: TBTCBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      371 |     platformLoaders.push(resolvedEvmPlatformLoader);
      372 |   } else {
    > 373 |     console.error(
          |             ^
      374 |       '[wormhole.e2e.test.utils] EVM platform loader could not be resolved to a function. Actual type:',
      375 |       typeof evmPlatform,
      376 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:373:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.error
    [wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type: object Imported content: {
      Address: [class SuiAddress] { byteSize: 32, platform: 'Sui' },
      Platform: [class SuiPlatform extends PlatformContext] { _platform: 'Sui' },
      getSigner: [AsyncFunction: getSuiSigner],
      protocols: {
        WormholeCore: [Function: WormholeCore],
        TokenBridge: [Function: TokenBridge],
        CircleBridge: [Function: CircleBridge]
      },
      getChain: [Function: getChain]
    } Resolved loader type: undefined

      385 |     platformLoaders.push(resolvedSuiPlatformLoader);
      386 |   } else {
    > 387 |     console.error(
          |             ^
      388 |       '[wormhole.e2e.test.utils] Sui platform loader could not be resolved to a function. Actual type:',
      389 |       typeof suiPlatform,
      390 |       'Imported content:',

      at setupWormholeMocksAndService (tests/e2e/utils/wormhole.e2e.test.utils.ts:387:13)
      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:50:47)

  console.log
    [GLOBAL MOCK WormholeVaaService.create CALLED] Args: [
      {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      'Testnet',
      []
    ]

      at Object.<anonymous> (tests/setup.ts:41:17)

  console.warn
    Skipping VAA emitter chain mismatch test for L2 chain Avalanche as specific check may not apply.

      419 |     // Skip this test if L2 is Sui or Avax as the specific emitter chain check might not apply or behave differently
      420 |     if (scenario.l2ChainId === L2_CHAIN_ID_SUI || scenario.l2ChainId === L2_CHAIN_ID_AVAX) {
    > 421 |       console.warn(
          |               ^
      422 |         `Skipping VAA emitter chain mismatch test for L2 chain ${scenario.l2ChainName} as specific check may not apply.`,
      423 |       );
      424 |       return;

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:421:15)

FAIL tests/e2e/wormhole.vaa.service.e2e.test.ts
  WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks)
    ✕ Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes) (28 ms)
    ✕ Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types) (11 ms)
    ✕ Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize) (11 ms)
    ✕ Subtask 13.5: L2 Tx Reverted - should return null and log error (8 ms)
    ✕ Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info (12 ms)
    ✕ Subtask 13.8: VAA emitter address mismatch (10 ms)
    ✕ Subtask 13.9: isTransferCompleted Returns False - should return null and log info (10 ms)
    ✕ Subtask 13.10: isTransferCompleted Throws Error - should return null and log error (20 ms)
    ✓ VAA Emitter Chain Mismatch - should return null and log error (7 ms)
  WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks)
    ✕ Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes) (15 ms)
    ✕ Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types) (16 ms)
    ✕ Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize) (10 ms)
    ✕ Subtask 13.5: L2 Tx Reverted - should return null and log error (9 ms)
    ✕ Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info (13 ms)
    ✕ Subtask 13.8: VAA emitter address mismatch (13 ms)
    ✕ Subtask 13.9: isTransferCompleted Returns False - should return null and log info (13 ms)
    ✕ Subtask 13.10: isTransferCompleted Throws Error - should return null and log error (9 ms)
    ✓ VAA Emitter Chain Mismatch - should return null and log error (19 ms)
  WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks)
    ✕ Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes) (15 ms)
    ✕ Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types) (12 ms)
    ✕ Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize) (10 ms)
    ✕ Subtask 13.5: L2 Tx Reverted - should return null and log error (10 ms)
    ✕ Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info (13 ms)
    ✕ Subtask 13.8: VAA emitter address mismatch (9 ms)
    ✕ Subtask 13.9: isTransferCompleted Returns False - should return null and log info (13 ms)
    ✕ Subtask 13.10: isTransferCompleted Throws Error - should return null and log error (15 ms)
    ✓ VAA Emitter Chain Mismatch - should return null and log error (14 ms)
  WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks)
    ✕ Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes) (9 ms)
    ✕ Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types) (7 ms)
    ✕ Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize) (8 ms)
    ✕ Subtask 13.5: L2 Tx Reverted - should return null and log error (9 ms)
    ✕ Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info (8 ms)
    ✕ Subtask 13.8: VAA emitter address mismatch (9 ms)
    ✕ Subtask 13.9: isTransferCompleted Returns False - should return null and log info (8 ms)
    ✕ Subtask 13.10: isTransferCompleted Throws Error - should return null and log error (10 ms)
    ✓ VAA Emitter Chain Mismatch - should return null and log error (4 ms)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes)

    expect(received).not.toBeNull()

    Received: null

      93 |     );
      94 |
    > 95 |     expect(result).not.toBeNull();
         |                        ^
      96 |     expect(result?.vaaBytes).toBe(mockVaaBytes);
      97 |     expect(result?.parsedVaa).toBe(mockParsedVaa);
      98 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(L2_EXAMPLE_TX_HASH);

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:95:24)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"chain": "Sui", "emitter": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "sequence": 124n}, "TokenBridge:TransferWithPayload", 5000

    Number of calls: 0

      139 |
      140 |     expect(result).toBeNull();
    > 141 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(
          |                                               ^
      142 |       localMockWormholeMessageId, // Use the one with correct sequence
      143 |       'TokenBridge:TransferWithPayload',
      144 |       EXPECTED_GET_VAA_TIMEOUT_MS,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:141:47)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize)

    expect(received).not.toBeNull()

    Received: null

      188 |     );
      189 |
    > 190 |     expect(result).not.toBeNull();
          |                        ^
      191 |     expect(result?.vaaBytes).toEqual(new Uint8Array([5, 4, 3, 2, 1]));
      192 |     expect(result?.parsedVaa).toBe(mockVaaToSerialize);
      193 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:190:24)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.5: L2 Tx Reverted - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"

    Number of calls: 0

      225 |
      226 |     expect(result).toBeNull();
    > 227 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(l2TxRevertedHash);
          |                                                        ^
      228 |     expect(mocks.mockL2ChainContext.parseTransaction).not.toHaveBeenCalled();
      229 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
      230 |       `L2 transaction ${l2TxRevertedHash} failed (reverted), cannot fetch VAA. Receipt: ${stringifyWithBigInt(revertedReceipt)}`,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:227:56)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Sui"

    Number of calls: 0

      265 |
      266 |     expect(result).toBeNull();
    > 267 |     expect(mocks.mockWormholeInstance.getChain).toHaveBeenCalledWith(scenario.l2ChainName);
          |                                                 ^
      268 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
      269 |       `No Wormhole messages found in L2 transaction ${l2TxNoMessageHash}. Chain: ${scenario.l2ChainName}.`,
      270 |       expect.any(Error),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:267:49)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.8: VAA emitter address mismatch

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"chain": "Sui", "emitter": {"address": [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, …]}, "sequence": 123n}, "TokenBridge:TransferWithPayload", 5000

    Number of calls: 0

      322 |
      323 |     expect(result).toBeNull();
    > 324 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(
          |                                               ^
      325 |       localMockWormholeMessageId, // Called with the message ID from parseTransaction
      326 |       'TokenBridge:TransferWithPayload',
      327 |       EXPECTED_GET_VAA_TIMEOUT_MS,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:324:47)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.9: isTransferCompleted Returns False - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"bytes": [1, 2, 3, 4, 5], "consistencyLevel": 0, "emitterAddress": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "emitterChain": "Sui", "guardianSet": 0, "hash": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …], "nonce": 0, "payload": {"anotherKey": 123, "somePayloadData": "data"}, "payloadLiteral": "TokenBridge:TransferWithPayload", "payloadName": "TransferWithPayload", "protocolName": "TokenBridge", "sequence": 123n, "serialize": [Function mockConstructor], "signatures": [], "timestamp": 1748289355, "version": 1}

    Number of calls: 0

      367 |
      368 |     expect(result).toBeNull();
    > 369 |     expect(mocks.mockL1TokenBridgeOperations.isTransferCompleted).toHaveBeenCalledWith(
          |                                                                   ^
      370 |       mockParsedVaa,
      371 |     );
      372 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:369:67)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.10: isTransferCompleted Throws Error - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"bytes": [1, 2, 3, 4, 5], "consistencyLevel": 0, "emitterAddress": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "emitterChain": "Sui", "guardianSet": 0, "hash": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …], "nonce": 0, "payload": {"anotherKey": 123, "somePayloadData": "data"}, "payloadLiteral": "TokenBridge:TransferWithPayload", "payloadName": "TransferWithPayload", "protocolName": "TokenBridge", "sequence": 123n, "serialize": [Function mockConstructor], "signatures": [], "timestamp": 1748289355, "version": 1}

    Number of calls: 0

      405 |
      406 |     expect(result).toBeNull();
    > 407 |     expect(mocks.mockL1TokenBridgeOperations.isTransferCompleted).toHaveBeenCalledWith(
          |                                                                   ^
      408 |       mockParsedVaa,
      409 |     );
      410 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:407:67)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes)

    expect(received).not.toBeNull()

    Received: null

      93 |     );
      94 |
    > 95 |     expect(result).not.toBeNull();
         |                        ^
      96 |     expect(result?.vaaBytes).toBe(mockVaaBytes);
      97 |     expect(result?.parsedVaa).toBe(mockParsedVaa);
      98 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(L2_EXAMPLE_TX_HASH);

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:95:24)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"chain": "Avalanche", "emitter": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "sequence": 124n}, "TokenBridge:TransferWithPayload", 5000

    Number of calls: 0

      139 |
      140 |     expect(result).toBeNull();
    > 141 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(
          |                                               ^
      142 |       localMockWormholeMessageId, // Use the one with correct sequence
      143 |       'TokenBridge:TransferWithPayload',
      144 |       EXPECTED_GET_VAA_TIMEOUT_MS,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:141:47)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize)

    expect(received).not.toBeNull()

    Received: null

      188 |     );
      189 |
    > 190 |     expect(result).not.toBeNull();
          |                        ^
      191 |     expect(result?.vaaBytes).toEqual(new Uint8Array([5, 4, 3, 2, 1]));
      192 |     expect(result?.parsedVaa).toBe(mockVaaToSerialize);
      193 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:190:24)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.5: L2 Tx Reverted - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"

    Number of calls: 0

      225 |
      226 |     expect(result).toBeNull();
    > 227 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(l2TxRevertedHash);
          |                                                        ^
      228 |     expect(mocks.mockL2ChainContext.parseTransaction).not.toHaveBeenCalled();
      229 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
      230 |       `L2 transaction ${l2TxRevertedHash} failed (reverted), cannot fetch VAA. Receipt: ${stringifyWithBigInt(revertedReceipt)}`,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:227:56)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Avalanche"

    Number of calls: 0

      265 |
      266 |     expect(result).toBeNull();
    > 267 |     expect(mocks.mockWormholeInstance.getChain).toHaveBeenCalledWith(scenario.l2ChainName);
          |                                                 ^
      268 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
      269 |       `No Wormhole messages found in L2 transaction ${l2TxNoMessageHash}. Chain: ${scenario.l2ChainName}.`,
      270 |       expect.any(Error),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:267:49)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.8: VAA emitter address mismatch

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"chain": "Avalanche", "emitter": {"address": [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, …]}, "sequence": 123n}, "TokenBridge:TransferWithPayload", 5000

    Number of calls: 0

      322 |
      323 |     expect(result).toBeNull();
    > 324 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(
          |                                               ^
      325 |       localMockWormholeMessageId, // Called with the message ID from parseTransaction
      326 |       'TokenBridge:TransferWithPayload',
      327 |       EXPECTED_GET_VAA_TIMEOUT_MS,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:324:47)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.9: isTransferCompleted Returns False - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"bytes": [1, 2, 3, 4, 5], "consistencyLevel": 0, "emitterAddress": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "emitterChain": "Avalanche", "guardianSet": 0, "hash": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …], "nonce": 0, "payload": {"anotherKey": 123, "somePayloadData": "data"}, "payloadLiteral": "TokenBridge:TransferWithPayload", "payloadName": "TransferWithPayload", "protocolName": "TokenBridge", "sequence": 123n, "serialize": [Function mockConstructor], "signatures": [], "timestamp": 1748289355, "version": 1}

    Number of calls: 0

      367 |
      368 |     expect(result).toBeNull();
    > 369 |     expect(mocks.mockL1TokenBridgeOperations.isTransferCompleted).toHaveBeenCalledWith(
          |                                                                   ^
      370 |       mockParsedVaa,
      371 |     );
      372 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:369:67)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.10: isTransferCompleted Throws Error - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"bytes": [1, 2, 3, 4, 5], "consistencyLevel": 0, "emitterAddress": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "emitterChain": "Avalanche", "guardianSet": 0, "hash": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …], "nonce": 0, "payload": {"anotherKey": 123, "somePayloadData": "data"}, "payloadLiteral": "TokenBridge:TransferWithPayload", "payloadName": "TransferWithPayload", "protocolName": "TokenBridge", "sequence": 123n, "serialize": [Function mockConstructor], "signatures": [], "timestamp": 1748289355, "version": 1}

    Number of calls: 0

      405 |
      406 |     expect(result).toBeNull();
    > 407 |     expect(mocks.mockL1TokenBridgeOperations.isTransferCompleted).toHaveBeenCalledWith(
          |                                                                   ^
      408 |       mockParsedVaa,
      409 |     );
      410 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:407:67)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes)

    expect(received).not.toBeNull()

    Received: null

      93 |     );
      94 |
    > 95 |     expect(result).not.toBeNull();
         |                        ^
      96 |     expect(result?.vaaBytes).toBe(mockVaaBytes);
      97 |     expect(result?.parsedVaa).toBe(mockParsedVaa);
      98 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(L2_EXAMPLE_TX_HASH);

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:95:24)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"chain": "Sui", "emitter": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "sequence": 124n}, "TokenBridge:TransferWithPayload", 5000

    Number of calls: 0

      139 |
      140 |     expect(result).toBeNull();
    > 141 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(
          |                                               ^
      142 |       localMockWormholeMessageId, // Use the one with correct sequence
      143 |       'TokenBridge:TransferWithPayload',
      144 |       EXPECTED_GET_VAA_TIMEOUT_MS,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:141:47)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize)

    expect(received).not.toBeNull()

    Received: null

      188 |     );
      189 |
    > 190 |     expect(result).not.toBeNull();
          |                        ^
      191 |     expect(result?.vaaBytes).toEqual(new Uint8Array([5, 4, 3, 2, 1]));
      192 |     expect(result?.parsedVaa).toBe(mockVaaToSerialize);
      193 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:190:24)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.5: L2 Tx Reverted - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"

    Number of calls: 0

      225 |
      226 |     expect(result).toBeNull();
    > 227 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(l2TxRevertedHash);
          |                                                        ^
      228 |     expect(mocks.mockL2ChainContext.parseTransaction).not.toHaveBeenCalled();
      229 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
      230 |       `L2 transaction ${l2TxRevertedHash} failed (reverted), cannot fetch VAA. Receipt: ${stringifyWithBigInt(revertedReceipt)}`,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:227:56)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Sui"

    Number of calls: 0

      265 |
      266 |     expect(result).toBeNull();
    > 267 |     expect(mocks.mockWormholeInstance.getChain).toHaveBeenCalledWith(scenario.l2ChainName);
          |                                                 ^
      268 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
      269 |       `No Wormhole messages found in L2 transaction ${l2TxNoMessageHash}. Chain: ${scenario.l2ChainName}.`,
      270 |       expect.any(Error),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:267:49)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.8: VAA emitter address mismatch

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"chain": "Sui", "emitter": {"address": [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, …]}, "sequence": 123n}, "TokenBridge:TransferWithPayload", 5000

    Number of calls: 0

      322 |
      323 |     expect(result).toBeNull();
    > 324 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(
          |                                               ^
      325 |       localMockWormholeMessageId, // Called with the message ID from parseTransaction
      326 |       'TokenBridge:TransferWithPayload',
      327 |       EXPECTED_GET_VAA_TIMEOUT_MS,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:324:47)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.9: isTransferCompleted Returns False - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"bytes": [1, 2, 3, 4, 5], "consistencyLevel": 0, "emitterAddress": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "emitterChain": "Sui", "guardianSet": 0, "hash": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …], "nonce": 0, "payload": {"anotherKey": 123, "somePayloadData": "data"}, "payloadLiteral": "TokenBridge:TransferWithPayload", "payloadName": "TransferWithPayload", "protocolName": "TokenBridge", "sequence": 123n, "serialize": [Function mockConstructor], "signatures": [], "timestamp": 1748289355, "version": 1}

    Number of calls: 0

      367 |
      368 |     expect(result).toBeNull();
    > 369 |     expect(mocks.mockL1TokenBridgeOperations.isTransferCompleted).toHaveBeenCalledWith(
          |                                                                   ^
      370 |       mockParsedVaa,
      371 |     );
      372 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:369:67)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.10: isTransferCompleted Throws Error - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"bytes": [1, 2, 3, 4, 5], "consistencyLevel": 0, "emitterAddress": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "emitterChain": "Sui", "guardianSet": 0, "hash": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …], "nonce": 0, "payload": {"anotherKey": 123, "somePayloadData": "data"}, "payloadLiteral": "TokenBridge:TransferWithPayload", "payloadName": "TransferWithPayload", "protocolName": "TokenBridge", "sequence": 123n, "serialize": [Function mockConstructor], "signatures": [], "timestamp": 1748289355, "version": 1}

    Number of calls: 0

      405 |
      406 |     expect(result).toBeNull();
    > 407 |     expect(mocks.mockL1TokenBridgeOperations.isTransferCompleted).toHaveBeenCalledWith(
          |                                                                   ^
      408 |       mockParsedVaa,
      409 |     );
      410 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:407:67)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes)

    expect(received).not.toBeNull()

    Received: null

      93 |     );
      94 |
    > 95 |     expect(result).not.toBeNull();
         |                        ^
      96 |     expect(result?.vaaBytes).toBe(mockVaaBytes);
      97 |     expect(result?.parsedVaa).toBe(mockParsedVaa);
      98 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(L2_EXAMPLE_TX_HASH);

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:95:24)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"chain": "Avalanche", "emitter": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "sequence": 124n}, "TokenBridge:TransferWithPayload", 5000

    Number of calls: 0

      139 |
      140 |     expect(result).toBeNull();
    > 141 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(
          |                                               ^
      142 |       localMockWormholeMessageId, // Use the one with correct sequence
      143 |       'TokenBridge:TransferWithPayload',
      144 |       EXPECTED_GET_VAA_TIMEOUT_MS,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:141:47)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize)

    expect(received).not.toBeNull()

    Received: null

      188 |     );
      189 |
    > 190 |     expect(result).not.toBeNull();
          |                        ^
      191 |     expect(result?.vaaBytes).toEqual(new Uint8Array([5, 4, 3, 2, 1]));
      192 |     expect(result?.parsedVaa).toBe(mockVaaToSerialize);
      193 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:190:24)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.5: L2 Tx Reverted - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"

    Number of calls: 0

      225 |
      226 |     expect(result).toBeNull();
    > 227 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(l2TxRevertedHash);
          |                                                        ^
      228 |     expect(mocks.mockL2ChainContext.parseTransaction).not.toHaveBeenCalled();
      229 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
      230 |       `L2 transaction ${l2TxRevertedHash} failed (reverted), cannot fetch VAA. Receipt: ${stringifyWithBigInt(revertedReceipt)}`,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:227:56)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Avalanche"

    Number of calls: 0

      265 |
      266 |     expect(result).toBeNull();
    > 267 |     expect(mocks.mockWormholeInstance.getChain).toHaveBeenCalledWith(scenario.l2ChainName);
          |                                                 ^
      268 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
      269 |       `No Wormhole messages found in L2 transaction ${l2TxNoMessageHash}. Chain: ${scenario.l2ChainName}.`,
      270 |       expect.any(Error),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:267:49)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.8: VAA emitter address mismatch

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"chain": "Avalanche", "emitter": {"address": [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, …]}, "sequence": 123n}, "TokenBridge:TransferWithPayload", 5000

    Number of calls: 0

      322 |
      323 |     expect(result).toBeNull();
    > 324 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledWith(
          |                                               ^
      325 |       localMockWormholeMessageId, // Called with the message ID from parseTransaction
      326 |       'TokenBridge:TransferWithPayload',
      327 |       EXPECTED_GET_VAA_TIMEOUT_MS,

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:324:47)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.9: isTransferCompleted Returns False - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"bytes": [1, 2, 3, 4, 5], "consistencyLevel": 0, "emitterAddress": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "emitterChain": "Avalanche", "guardianSet": 0, "hash": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …], "nonce": 0, "payload": {"anotherKey": 123, "somePayloadData": "data"}, "payloadLiteral": "TokenBridge:TransferWithPayload", "payloadName": "TransferWithPayload", "protocolName": "TokenBridge", "sequence": 123n, "serialize": [Function mockConstructor], "signatures": [], "timestamp": 1748289355, "version": 1}

    Number of calls: 0

      367 |
      368 |     expect(result).toBeNull();
    > 369 |     expect(mocks.mockL1TokenBridgeOperations.isTransferCompleted).toHaveBeenCalledWith(
          |                                                                   ^
      370 |       mockParsedVaa,
      371 |     );
      372 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:369:67)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.10: isTransferCompleted Throws Error - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: {"bytes": [1, 2, 3, 4, 5], "consistencyLevel": 0, "emitterAddress": {"address": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …]}, "emitterChain": "Avalanche", "guardianSet": 0, "hash": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …], "nonce": 0, "payload": {"anotherKey": 123, "somePayloadData": "data"}, "payloadLiteral": "TokenBridge:TransferWithPayload", "payloadName": "TransferWithPayload", "protocolName": "TokenBridge", "sequence": 123n, "serialize": [Function mockConstructor], "signatures": [], "timestamp": 1748289355, "version": 1}

    Number of calls: 0

      405 |
      406 |     expect(result).toBeNull();
    > 407 |     expect(mocks.mockL1TokenBridgeOperations.isTransferCompleted).toHaveBeenCalledWith(
          |                                                                   ^
      408 |       mockParsedVaa,
      409 |     );
      410 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:407:67)

  console.log
    [tests/setup.ts] Mocking WormholeVaaService CLASS. USE_REAL_WORMHOLE_SERVICE is not true.

      at Object.<anonymous> (tests/setup.ts:27:11)

[2025-05-26 21:55:57.203 +0200] [32mINFO[39m: [36mReceived L2 DepositInitialized event | ID: 27765049594946925696933928575831516539809259908079081875660924009008744228051 | Owner: 0x4098b89eea91f5f0cc8b175953dc5b4dc3d9acfb[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:55:57.252 +0200] [32mINFO[39m: [36mMock chain handler: Initializing deposit 27765049594946925696933928575831516539809259908079081875660924009008744228051[39m
    appName: "TBTC RELAYER TEST"
PASS tests/integration/controllers/Endpoint.controller.test.ts (5.358 s)
  EndpointController
    handleReveal
      ✓ should successfully handle a valid reveal request (1374 ms)
      ✓ should return 400 for missing required fields (1108 ms)
    getDepositStatus
      ✓ should return status for a valid deposit ID (1248 ms)
      ✓ should return 400 for missing deposit ID (1245 ms)

[2025-05-26 21:55:57.352 +0200] [32mINFO[39m: [36mMockChainHandler: Deposit 27765049594946925696933928575831516539809259908079081875660924009008744228051 initialized.[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:55:57.353 +0200] [32mINFO[39m: [36mMockChainHandler: Emitting event DepositInitialized with args:[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:55:59.709 +0200] [32mINFO[39m: [36mMockChainHandler: Adding deposit 0x11e985883ffa0ca0e7d8d038c6796a59a7b2d4573c0b76b0eff1810e5ef22c01[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:55:59.710 +0200] [32mINFO[39m: [36mMockChainHandler: Checking status for deposit 0x11e985883ffa0ca0e7d8d038c6796a59a7b2d4573c0b76b0eff1810e5ef22c01[39m
    appName: "TBTC RELAYER TEST"
  console.log
    [tests/setup.ts] Mocking WormholeVaaService CLASS. USE_REAL_WORMHOLE_SERVICE is not true.

      at Object.<anonymous> (tests/setup.ts:27:11)

  console.log
    [[[[[ RoutesSingleton CONSTRUCTOR - Instance 1 ]]]]] CREATING ROUTER

      at new RoutesSingleton (routes/Routes.ts:72:13)

  console.log
    [[[[[ RoutesSingleton CONSTRUCTOR - Instance 1 ]]]]] Initializing routes...

      at RoutesSingleton.initializeRoutes (routes/Routes.ts:91:13)

  console.log
    [[[[[ RoutesSingleton CONSTRUCTOR - Instance 1 ]]]]] MOUNTED /api/:chainName with chainSpecificRouter

      at RoutesSingleton.initializeRoutes (routes/Routes.ts:99:13)

  console.log
    [[[[[ RoutesSingleton CONSTRUCTOR - Instance 1 ]]]]] All routes initialized.

      at RoutesSingleton.initializeRoutes (routes/Routes.ts:105:13)

PASS tests/e2e/api.test.ts
  API Endpoint Tests with Local App and Global Registry
    API Endpoints - Multi-Chain
      ✓ Supported chains are correctly loaded for testing (1 ms)
      GET /
        ✓ should return 200 and a welcome message (44 ms)
      GET /status
        ✓ should return 200 and status OK (8 ms)
      API Access with Invalid Chain
        ✓ should return 404 for an unsupported chain name in path (6 ms)

[2025-05-26 21:56:01.362 +0200] [32mINFO[39m: [36mApplication configuration loaded successfully.[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.362 +0200] [32mINFO[39m: [36mLoading chain configurations...[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.362 +0200] [32mINFO[39m: [36mSUPPORTED_CHAINS set. Will attempt to load configurations for: mockEVM1, mockEVM2, faultyMockEVM[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.363 +0200] [32mINFO[39m: [36mAttempting to load configuration for chain: mockEVM1[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.365 +0200] [32mINFO[39m: [36mSuccessfully loaded configuration for chain: mockEVM1[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.365 +0200] [32mINFO[39m: [36mAttempting to load configuration for chain: mockEVM2[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.366 +0200] [32mINFO[39m: [36mSuccessfully loaded configuration for chain: mockEVM2[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.366 +0200] [32mINFO[39m: [36mAttempting to load configuration for chain: faultyMockEVM[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.366 +0200] [32mINFO[39m: [36mSuccessfully loaded configuration for chain: faultyMockEVM[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.366 +0200] [32mINFO[39m: [36mSuccessfully loaded 3 chain configuration(s).[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.691 +0200] [32mINFO[39m: [36mSUPPORTED_CHAINS environment variable set. Attempting to load: mockEVM1, mockEVM2, faultyMockEVM[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.697 +0200] [32mINFO[39m: [36mApplication starting...[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.697 +0200] [32mINFO[39m: [36mApp Name: tBTC Relayer Test, Version: 1.0.0-dev, Env: test[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.697 +0200] [32mINFO[39m: [36mLoaded 3 chain configurations via Zod: mockEVM1, mockEVM2, faultyMockEVM[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.697 +0200] [32mINFO[39m: [36mCORS enabled for origin: http://localhost:4000[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.700 +0200] [33mWARN[39m: [36mApplication running in API_ONLY_MODE. Background services (chain handlers, cron jobs) will not be initialized.[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.700 +0200] [32mINFO[39m: [36mServer not started in test environment (tests will manage their own server instances if needed).[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.700 +0200] [32mINFO[39m: [36mApplication initialization sequence complete.[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.702 +0200] [32mINFO[39m: [36mAttempting to create chain handler for type: Evm, name: MockEVM1[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.702 +0200] [32mINFO[39m: [36mCreating EVMChainHandler[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.702 +0200] [32mINFO[39m: [36mAttempting to create chain handler for type: Evm, name: MockEVM2[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.702 +0200] [32mINFO[39m: [36mCreating EVMChainHandler[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.702 +0200] [32mINFO[39m: [36mAttempting to create chain handler for type: Evm, name: FaultyMockEVM[39m
    appName: "TBTC RELAYER TEST"
[2025-05-26 21:56:01.702 +0200] [32mINFO[39m: [36mCreating EVMChainHandler[39m
    appName: "TBTC RELAYER TEST"
  console.log
    [tests/setup.ts] Mocking WormholeVaaService CLASS. USE_REAL_WORMHOLE_SERVICE is not true.

      at Object.<anonymous> (tests/setup.ts:27:11)

PASS tests/unit/utils/AuditLog.test.ts
  AuditLog
    ✓ appendToAuditLog (spied) is called with correct arguments (54 ms)
    ✓ logDepositCreated calls appendToAuditLog (5 ms)
    ✓ logStatusChange calls appendToAuditLog (3 ms)
    ✓ logDepositInitialized calls appendToAuditLog (1 ms)
    ✓ logDepositFinalized calls appendToAuditLog (2 ms)
    ✓ logDepositDeleted calls appendToAuditLog (2 ms)
    ✓ logApiRequest should call appendToAuditLog with correct parameters (1 ms)
    ✓ logDepositError should call appendToAuditLog with correct parameters (2 ms)

  console.log
    [tests/setup.ts] Mocking WormholeVaaService CLASS. USE_REAL_WORMHOLE_SERVICE is not true.

      at Object.<anonymous> (tests/setup.ts:27:11)

FAIL tests/integration/services/WormholeVaaService.test.ts
  ● Test suite failed to run

    ReferenceError: Cannot access 'MockedJsonRpcProviderConstructor' before initialization

      36 | jest.mock('ethers', () => {
      37 |   const originalEthers = jest.requireActual('ethers') as typeof EthersNamespace;
    > 38 |   MockedJsonRpcProviderConstructor = jest.fn().mockImplementation(() => ({
         |                                   ^
      39 |     getTransactionReceipt:
      40 |       jest.fn<() => Promise<EthersNamespace.providers.TransactionReceipt | null>>(),
      41 |     getNetwork: jest.fn<() => Promise<EthersNamespace.providers.Network>>(),

      at tests/integration/services/WormholeVaaService.test.ts:38:35
      at Object.<anonymous> (tests/integration/services/WormholeVaaService.test.ts:6:1)

Test Suites: 2 failed, 3 passed, 5 total
Tests:       32 failed, 20 passed, 52 total
Snapshots:   0 total
Time:        8.547 s, estimated 9 s
Ran all test suites.
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
