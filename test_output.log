yarn run v1.22.22
warning ../../../../package.json: No license field
$ jest --runInBand
npm warn Unknown env config "version-commit-hooks". This will stop working in the next major version of npm.
npm warn Unknown env config "always-auth". This will stop working in the next major version of npm.
npm warn Unknown env config "version-tag-prefix". This will stop working in the next major version of npm.
npm warn Unknown env config "version-git-message". This will stop working in the next major version of npm.
npm warn Unknown env config "argv". This will stop working in the next major version of npm.
npm warn Unknown env config "version-git-tag". This will stop working in the next major version of npm.
npm warn Unknown user config "node_gyp". This will stop working in the next major version of npm.
npm warn Unknown user config "always-auth". This will stop working in the next major version of npm.
Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Datasource "db": PostgreSQL database "tbtc_relayer", schema "public" at "localhost:5432"

The PostgreSQL database "tbtc_relayer" schema "public" at "localhost:5432" was successfully reset.

🚀  Your database is now in sync with your Prisma schema. Done in 59ms

Running generate... (Use --skip-generate to skip the generators)
[2K[1A[2K[GRunning generate... - Prisma Client
[2K[1A[2K[G✔ Generated Prisma Client (v6.8.2) to ./node_modules/@prisma/client in 60ms
✔ Generated Prisma Client (v6.8.2) to ./node_modules/@prisma/client-test in 46m
s

  console.log
    [tests/setup.ts] Minimal version - providing mock helpers only

      at Object.<anonymous> (tests/setup.ts:1:9)

  console.log
    [tests/setup.ts] Finished execution (Minimal - SDK mock only)

      at Object.<anonymous> (tests/setup.ts:25:9)

  console.log
    [tests/setup.ts] EXECUTING @wormhole-foundation/sdk mock factory

      at tests/setup.ts:10:11

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Sui",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 11,
        "1": 22,
        "2": 33,
        "3": 44,
        "4": 55
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Exists serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:Transfer: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Returning null because vaa is null after loop.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:223:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:Transfer: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Sui",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "Transfer",
      "payloadLiteral": "TokenBridge:Transfer",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {},
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: Transfer

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Exists serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1111111111111111111111111111111111111111111111111111111111111111. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Sui",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 0,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: false

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Returning null because isTransferCompleted is false.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:263:21)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x2222222222222222222222222222222222222222222222222222222222222222. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Sui",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 0,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.warn
    Skipping VAA emitter chain mismatch test for L2 chain Sui as specific check may not apply.

      419 |     // Skip this test if L2 is Sui or Avax as the specific emitter chain check might not apply or behave differently
      420 |     if (scenario.l2ChainId === L2_CHAIN_ID_SUI || scenario.l2ChainId === L2_CHAIN_ID_AVAX) {
    > 421 |       console.warn(
          |               ^
      422 |         `Skipping VAA emitter chain mismatch test for L2 chain ${scenario.l2ChainName} as specific check may not apply.`,
      423 |       );
      424 |       return;

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:421:15)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Avalanche",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 11,
        "1": 22,
        "2": 33,
        "3": 44,
        "4": 55
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Exists serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:Transfer: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Returning null because vaa is null after loop.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:223:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:Transfer: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Avalanche",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "Transfer",
      "payloadLiteral": "TokenBridge:Transfer",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {},
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: Transfer

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Exists serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1111111111111111111111111111111111111111111111111111111111111111. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Avalanche",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 0,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: false

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Returning null because isTransferCompleted is false.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:263:21)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x2222222222222222222222222222222222222222222222222222222222222222. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Avalanche",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 0,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.warn
    Skipping VAA emitter chain mismatch test for L2 chain Avalanche as specific check may not apply.

      419 |     // Skip this test if L2 is Sui or Avax as the specific emitter chain check might not apply or behave differently
      420 |     if (scenario.l2ChainId === L2_CHAIN_ID_SUI || scenario.l2ChainId === L2_CHAIN_ID_AVAX) {
    > 421 |       console.warn(
          |               ^
      422 |         `Skipping VAA emitter chain mismatch test for L2 chain ${scenario.l2ChainName} as specific check may not apply.`,
      423 |       );
      424 |       return;

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:421:15)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Sui",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 11,
        "1": 22,
        "2": 33,
        "3": 44,
        "4": 55
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Exists serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:Transfer: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Returning null because vaa is null after loop.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:223:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:Transfer: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Sui",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "Transfer",
      "payloadLiteral": "TokenBridge:Transfer",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {},
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: Transfer

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Exists serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1111111111111111111111111111111111111111111111111111111111111111. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Sui",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 0,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: false

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Returning null because isTransferCompleted is false.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:263:21)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x2222222222222222222222222222222222222222222222222222222222222222. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Sui",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 0,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.warn
    Skipping VAA emitter chain mismatch test for L2 chain Sui as specific check may not apply.

      419 |     // Skip this test if L2 is Sui or Avax as the specific emitter chain check might not apply or behave differently
      420 |     if (scenario.l2ChainId === L2_CHAIN_ID_SUI || scenario.l2ChainId === L2_CHAIN_ID_AVAX) {
    > 421 |       console.warn(
          |               ^
      422 |         `Skipping VAA emitter chain mismatch test for L2 chain ${scenario.l2ChainName} as specific check may not apply.`,
      423 |       );
      424 |       return;

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:421:15)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Avalanche",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 11,
        "1": 22,
        "2": 33,
        "3": 44,
        "4": 55
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Exists serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:Transfer: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Returning null because vaa is null after loop.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:223:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:Transfer: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Avalanche",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "Transfer",
      "payloadLiteral": "TokenBridge:Transfer",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {},
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: Transfer

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Exists serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1111111111111111111111111111111111111111111111111111111111111111. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Avalanche",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 0,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: false

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Returning null because isTransferCompleted is false.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:263:21)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x2222222222222222222222222222222222222222222222222222222222222222. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "version": 1,
      "guardianSet": 0,
      "signatures": [],
      "timestamp": 1748415364,
      "nonce": 0,
      "emitterChain": "Avalanche",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 17,
          "13": 17,
          "14": 17,
          "15": 17,
          "16": 17,
          "17": 17,
          "18": 17,
          "19": 17,
          "20": 17,
          "21": 17,
          "22": 17,
          "23": 17,
          "24": 17,
          "25": 17,
          "26": 17,
          "27": 17,
          "28": 17,
          "29": 17,
          "30": 17,
          "31": 17
        }
      },
      "sequence": "123",
      "consistencyLevel": 0,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data",
        "anotherKey": 123
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      },
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 123n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        }
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSuiSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.warn
    Skipping VAA emitter chain mismatch test for L2 chain Avalanche as specific check may not apply.

      419 |     // Skip this test if L2 is Sui or Avax as the specific emitter chain check might not apply or behave differently
      420 |     if (scenario.l2ChainId === L2_CHAIN_ID_SUI || scenario.l2ChainId === L2_CHAIN_ID_AVAX) {
    > 421 |       console.warn(
          |               ^
      422 |         `Skipping VAA emitter chain mismatch test for L2 chain ${scenario.l2ChainName} as specific check may not apply.`,
      423 |       );
      424 |       return;

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:421:15)

FAIL tests/e2e/wormhole.vaa.service.e2e.test.ts
  WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks)
    ✕ Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes) (28 ms)
    ✕ Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types) (11 ms)
    ✕ Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize) (9 ms)
    ✕ Subtask 13.5: L2 Tx Reverted - should return null and log error (4 ms)
    ✕ Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info (4 ms)
    ✕ Subtask 13.8: VAA emitter address mismatch (4 ms)
    ✕ Subtask 13.9: isTransferCompleted Returns False - should return null and log info (7 ms)
    ✕ Subtask 13.10: isTransferCompleted Throws Error - should return null and log error (7 ms)
    ✓ VAA Emitter Chain Mismatch - should return null and log error (6 ms)
  WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks)
    ✕ Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes) (8 ms)
    ✕ Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types) (7 ms)
    ✕ Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize) (8 ms)
    ✕ Subtask 13.5: L2 Tx Reverted - should return null and log error (3 ms)
    ✕ Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info (4 ms)
    ✕ Subtask 13.8: VAA emitter address mismatch (3 ms)
    ✕ Subtask 13.9: isTransferCompleted Returns False - should return null and log info (5 ms)
    ✕ Subtask 13.10: isTransferCompleted Throws Error - should return null and log error (5 ms)
    ✓ VAA Emitter Chain Mismatch - should return null and log error (3 ms)
  WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks)
    ✕ Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes) (7 ms)
    ✕ Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types) (10 ms)
    ✕ Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize) (7 ms)
    ✕ Subtask 13.5: L2 Tx Reverted - should return null and log error (4 ms)
    ✕ Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info (5 ms)
    ✕ Subtask 13.8: VAA emitter address mismatch (6 ms)
    ✕ Subtask 13.9: isTransferCompleted Returns False - should return null and log info (7 ms)
    ✕ Subtask 13.10: isTransferCompleted Throws Error - should return null and log error (6 ms)
    ✓ VAA Emitter Chain Mismatch - should return null and log error (3 ms)
  WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks)
    ✕ Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes) (7 ms)
    ✕ Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types) (6 ms)
    ✕ Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize) (7 ms)
    ✕ Subtask 13.5: L2 Tx Reverted - should return null and log error (3 ms)
    ✕ Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info (3 ms)
    ✕ Subtask 13.8: VAA emitter address mismatch (3 ms)
    ✕ Subtask 13.9: isTransferCompleted Returns False - should return null and log info (4 ms)
    ✕ Subtask 13.10: isTransferCompleted Throws Error - should return null and log error (4 ms)
    ✓ VAA Emitter Chain Mismatch - should return null and log error (3 ms)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Token bridge transfer VAA confirmed completed on L1 (Arbitrum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

    Number of calls: 0

      108 |       mockParsedVaa,
      109 |     );
    > 110 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(
          |                                   ^
      111 |       expect.stringContaining(
      112 |         `Token bridge transfer VAA confirmed completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${L2_EXAMPLE_TX_HASH}`,
      113 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:110:35)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "this.wh.getVaa did not return a VAA for message ID {
      \"chain\": \"Sui\",
      \"emitter\": {
        \"address\": {
          \"0\": 0,
          \"1\": 0,
          \"2\": 0,
          \"3\": 0,
          \"4\": 0,
          \"5\": 0,
          \"6\": 0,
          \"7\": 0,
          \"8\": 0,
          \"9\": 0,
          \"10\": 0,
          \"11\": 0,
          \"12\": 17,
          \"13\": 17,
          \"14\": 17,
          \"15\": 17,
          \"16\": 17,
          \"17\": 17,
          \"18\": 17,
          \"19\": 17,
          \"20\": 17,
          \"21\": 17,
          \"22\": 17,
          \"23\": 17,
          \"24\": 17,
          \"25\": 17,
          \"26\": 17,
          \"27\": 17,
          \"28\": 17,
          \"29\": 17,
          \"30\": 17,
          \"31\": 17
        }
      },
      \"sequence\": \"124\"
    } after trying all discriminators", Any<Error>

    Number of calls: 0

      150 |     );
      151 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledTimes(2);
    > 152 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      153 |       expect.stringContaining(
      154 |         `this.wh.getVaa did not return a VAA for message ID ${stringifyWithBigInt(localMockWormholeMessageId)} after trying all discriminators`,
      155 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:152:39)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Token bridge transfer VAA confirmed completed on L1 (Arbitrum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

    Number of calls: 0

      205 |       mockVaaToSerialize,
      206 |     );
    > 207 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(
          |                                   ^
      208 |       expect.stringContaining(
      209 |         `Token bridge transfer VAA confirmed completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${L2_EXAMPLE_TX_HASH}`,
      210 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:207:35)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.5: L2 Tx Reverted - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "L2 transaction 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc failed (reverted), cannot fetch VAA. Receipt: {
      \"to\": \"0xtoaddressmock\",
      \"from\": \"0xfromaddressmock\",
      \"contractAddress\": \"0xcontractaddressmock\",
      \"transactionIndex\": 1,
      \"gasUsed\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x5208\"
      },
      \"logsBloom\": \"0xlogsBloommMock\",
      \"blockHash\": \"0xblockhashmock\",
      \"blockNumber\": 1234567,
      \"confirmations\": 10,
      \"cumulativeGasUsed\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x0186a0\"
      },
      \"effectiveGasPrice\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x02540be400\"
      },
      \"byzantium\": true,
      \"type\": 2,
      \"status\": 0,
      \"logs\": [],
      \"root\": \"0xrootmock\",
      \"transactionHash\": \"0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"
    }", Any<Error>

    Number of calls: 0

      227 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(l2TxRevertedHash);
      228 |     expect(mocks.mockL2ChainContext.parseTransaction).not.toHaveBeenCalled();
    > 229 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      230 |       `L2 transaction ${l2TxRevertedHash} failed (reverted), cannot fetch VAA. Receipt: ${stringifyWithBigInt(revertedReceipt)}`,
      231 |       expect.any(Error),
      232 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:229:39)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "No Wormhole messages found in L2 transaction 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. Chain: Sui.", Any<Error>

    Number of calls: 0

      266 |     expect(result).toBeNull();
      267 |     expect(mocks.mockWormholeInstance.getChain).toHaveBeenCalledWith(scenario.l2ChainName);
    > 268 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      269 |       `No Wormhole messages found in L2 transaction ${l2TxNoMessageHash}. Chain: ${scenario.l2ChainName}.`,
      270 |       expect.any(Error),
      271 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:268:39)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.8: VAA emitter address mismatch

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Could not find Wormhole message from emitter 0x1111111111111111111111111111111111111111 on chain Sui in L2 transaction 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. Found messages: [
      {
        \"chain\": \"Sui\",
        \"emitter\": {
          \"address\": {
            \"0\": 255,
            \"1\": 255,
            \"2\": 255,
            \"3\": 255,
            \"4\": 255,
            \"5\": 255,
            \"6\": 255,
            \"7\": 255,
            \"8\": 255,
            \"9\": 255,
            \"10\": 255,
            \"11\": 255,
            \"12\": 255,
            \"13\": 255,
            \"14\": 255,
            \"15\": 255,
            \"16\": 255,
            \"17\": 255,
            \"18\": 255,
            \"19\": 255,
            \"20\": 255,
            \"21\": 255,
            \"22\": 255,
            \"23\": 255,
            \"24\": 255,
            \"25\": 255,
            \"26\": 255,
            \"27\": 255,
            \"28\": 255,
            \"29\": 255,
            \"30\": 255,
            \"31\": 255
          }
        },
        \"sequence\": \"123\"
      }
    ]", ObjectContaining {"message": "Relevant WormholeMessageId not found"}

    Number of calls: 0

      327 |
      328 |     // Expect the log from the 'if (!messageId)' block in the service
    > 329 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      330 |       `Could not find Wormhole message from emitter ${scenario.expectedEmitterAddress} on chain ${actualChainIdToChain(scenario.l2ChainId)} in L2 transaction ${l2TxEmitterMismatchHash}. Found messages: ${stringifyWithBigInt([localMockWormholeMessageId])}`,
      331 |       expect.objectContaining({ message: 'Relevant WormholeMessageId not found' }),
      332 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:329:39)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.9: isTransferCompleted Returns False - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Token bridge transfer VAA not completed on L1 (Arbitrum) for 0x1111111111111111111111111111111111111111111111111111111111111111. VAA Seq: 123, Type: TransferWithPayload", ObjectContaining {"message": "VAA transfer not completed on L1"}

    Number of calls: 0

      368 |     // If this were a less severe "still pending" state, logger.info might be better.
      369 |     // For now, aligning test with current service log output.
    > 370 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      371 |       `Token bridge transfer VAA not completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${l2TxTransferNotCompletedHash}. VAA Seq: ${mockParsedVaa.sequence}, Type: ${mockParsedVaa.payloadName}`,
      372 |       expect.objectContaining({ message: 'VAA transfer not completed on L1' }),
      373 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:370:39)

  ● WormholeVaaService E2E for Sui (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.10: isTransferCompleted Throws Error - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Error checking VAA completion on L1 (Arbitrum): RPC error on target chain", [Error: RPC error on target chain]

    Number of calls: 0

      408 |     );
      409 |     // Aligning test with the actual log message from the service
    > 410 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      411 |       `Error checking VAA completion on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}): ${redemptionCheckError.message}`,
      412 |       redemptionCheckError, // The error object itself is passed as the second argument
      413 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:410:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Token bridge transfer VAA confirmed completed on L1 (Arbitrum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

    Number of calls: 0

      108 |       mockParsedVaa,
      109 |     );
    > 110 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(
          |                                   ^
      111 |       expect.stringContaining(
      112 |         `Token bridge transfer VAA confirmed completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${L2_EXAMPLE_TX_HASH}`,
      113 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:110:35)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "this.wh.getVaa did not return a VAA for message ID {
      \"chain\": \"Avalanche\",
      \"emitter\": {
        \"address\": {
          \"0\": 0,
          \"1\": 0,
          \"2\": 0,
          \"3\": 0,
          \"4\": 0,
          \"5\": 0,
          \"6\": 0,
          \"7\": 0,
          \"8\": 0,
          \"9\": 0,
          \"10\": 0,
          \"11\": 0,
          \"12\": 17,
          \"13\": 17,
          \"14\": 17,
          \"15\": 17,
          \"16\": 17,
          \"17\": 17,
          \"18\": 17,
          \"19\": 17,
          \"20\": 17,
          \"21\": 17,
          \"22\": 17,
          \"23\": 17,
          \"24\": 17,
          \"25\": 17,
          \"26\": 17,
          \"27\": 17,
          \"28\": 17,
          \"29\": 17,
          \"30\": 17,
          \"31\": 17
        }
      },
      \"sequence\": \"124\"
    } after trying all discriminators", Any<Error>

    Number of calls: 0

      150 |     );
      151 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledTimes(2);
    > 152 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      153 |       expect.stringContaining(
      154 |         `this.wh.getVaa did not return a VAA for message ID ${stringifyWithBigInt(localMockWormholeMessageId)} after trying all discriminators`,
      155 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:152:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Token bridge transfer VAA confirmed completed on L1 (Arbitrum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

    Number of calls: 0

      205 |       mockVaaToSerialize,
      206 |     );
    > 207 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(
          |                                   ^
      208 |       expect.stringContaining(
      209 |         `Token bridge transfer VAA confirmed completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${L2_EXAMPLE_TX_HASH}`,
      210 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:207:35)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.5: L2 Tx Reverted - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "L2 transaction 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc failed (reverted), cannot fetch VAA. Receipt: {
      \"to\": \"0xtoaddressmock\",
      \"from\": \"0xfromaddressmock\",
      \"contractAddress\": \"0xcontractaddressmock\",
      \"transactionIndex\": 1,
      \"gasUsed\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x5208\"
      },
      \"logsBloom\": \"0xlogsBloommMock\",
      \"blockHash\": \"0xblockhashmock\",
      \"blockNumber\": 1234567,
      \"confirmations\": 10,
      \"cumulativeGasUsed\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x0186a0\"
      },
      \"effectiveGasPrice\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x02540be400\"
      },
      \"byzantium\": true,
      \"type\": 2,
      \"status\": 0,
      \"logs\": [],
      \"root\": \"0xrootmock\",
      \"transactionHash\": \"0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"
    }", Any<Error>

    Number of calls: 0

      227 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(l2TxRevertedHash);
      228 |     expect(mocks.mockL2ChainContext.parseTransaction).not.toHaveBeenCalled();
    > 229 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      230 |       `L2 transaction ${l2TxRevertedHash} failed (reverted), cannot fetch VAA. Receipt: ${stringifyWithBigInt(revertedReceipt)}`,
      231 |       expect.any(Error),
      232 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:229:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "No Wormhole messages found in L2 transaction 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. Chain: Avalanche.", Any<Error>

    Number of calls: 0

      266 |     expect(result).toBeNull();
      267 |     expect(mocks.mockWormholeInstance.getChain).toHaveBeenCalledWith(scenario.l2ChainName);
    > 268 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      269 |       `No Wormhole messages found in L2 transaction ${l2TxNoMessageHash}. Chain: ${scenario.l2ChainName}.`,
      270 |       expect.any(Error),
      271 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:268:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.8: VAA emitter address mismatch

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Could not find Wormhole message from emitter 0x1111111111111111111111111111111111111111 on chain Avalanche in L2 transaction 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. Found messages: [
      {
        \"chain\": \"Avalanche\",
        \"emitter\": {
          \"address\": {
            \"0\": 255,
            \"1\": 255,
            \"2\": 255,
            \"3\": 255,
            \"4\": 255,
            \"5\": 255,
            \"6\": 255,
            \"7\": 255,
            \"8\": 255,
            \"9\": 255,
            \"10\": 255,
            \"11\": 255,
            \"12\": 255,
            \"13\": 255,
            \"14\": 255,
            \"15\": 255,
            \"16\": 255,
            \"17\": 255,
            \"18\": 255,
            \"19\": 255,
            \"20\": 255,
            \"21\": 255,
            \"22\": 255,
            \"23\": 255,
            \"24\": 255,
            \"25\": 255,
            \"26\": 255,
            \"27\": 255,
            \"28\": 255,
            \"29\": 255,
            \"30\": 255,
            \"31\": 255
          }
        },
        \"sequence\": \"123\"
      }
    ]", ObjectContaining {"message": "Relevant WormholeMessageId not found"}

    Number of calls: 0

      327 |
      328 |     // Expect the log from the 'if (!messageId)' block in the service
    > 329 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      330 |       `Could not find Wormhole message from emitter ${scenario.expectedEmitterAddress} on chain ${actualChainIdToChain(scenario.l2ChainId)} in L2 transaction ${l2TxEmitterMismatchHash}. Found messages: ${stringifyWithBigInt([localMockWormholeMessageId])}`,
      331 |       expect.objectContaining({ message: 'Relevant WormholeMessageId not found' }),
      332 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:329:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.9: isTransferCompleted Returns False - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Token bridge transfer VAA not completed on L1 (Arbitrum) for 0x1111111111111111111111111111111111111111111111111111111111111111. VAA Seq: 123, Type: TransferWithPayload", ObjectContaining {"message": "VAA transfer not completed on L1"}

    Number of calls: 0

      368 |     // If this were a less severe "still pending" state, logger.info might be better.
      369 |     // For now, aligning test with current service log output.
    > 370 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      371 |       `Token bridge transfer VAA not completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${l2TxTransferNotCompletedHash}. VAA Seq: ${mockParsedVaa.sequence}, Type: ${mockParsedVaa.payloadName}`,
      372 |       expect.objectContaining({ message: 'VAA transfer not completed on L1' }),
      373 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:370:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Arbitrum (L1) (SDK mocks) › Subtask 13.10: isTransferCompleted Throws Error - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Error checking VAA completion on L1 (Arbitrum): RPC error on target chain", [Error: RPC error on target chain]

    Number of calls: 0

      408 |     );
      409 |     // Aligning test with the actual log message from the service
    > 410 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      411 |       `Error checking VAA completion on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}): ${redemptionCheckError.message}`,
      412 |       redemptionCheckError, // The error object itself is passed as the second argument
      413 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:410:39)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Token bridge transfer VAA confirmed completed on L1 (Ethereum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

    Number of calls: 0

      108 |       mockParsedVaa,
      109 |     );
    > 110 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(
          |                                   ^
      111 |       expect.stringContaining(
      112 |         `Token bridge transfer VAA confirmed completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${L2_EXAMPLE_TX_HASH}`,
      113 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:110:35)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "this.wh.getVaa did not return a VAA for message ID {
      \"chain\": \"Sui\",
      \"emitter\": {
        \"address\": {
          \"0\": 0,
          \"1\": 0,
          \"2\": 0,
          \"3\": 0,
          \"4\": 0,
          \"5\": 0,
          \"6\": 0,
          \"7\": 0,
          \"8\": 0,
          \"9\": 0,
          \"10\": 0,
          \"11\": 0,
          \"12\": 17,
          \"13\": 17,
          \"14\": 17,
          \"15\": 17,
          \"16\": 17,
          \"17\": 17,
          \"18\": 17,
          \"19\": 17,
          \"20\": 17,
          \"21\": 17,
          \"22\": 17,
          \"23\": 17,
          \"24\": 17,
          \"25\": 17,
          \"26\": 17,
          \"27\": 17,
          \"28\": 17,
          \"29\": 17,
          \"30\": 17,
          \"31\": 17
        }
      },
      \"sequence\": \"124\"
    } after trying all discriminators", Any<Error>

    Number of calls: 0

      150 |     );
      151 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledTimes(2);
    > 152 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      153 |       expect.stringContaining(
      154 |         `this.wh.getVaa did not return a VAA for message ID ${stringifyWithBigInt(localMockWormholeMessageId)} after trying all discriminators`,
      155 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:152:39)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Token bridge transfer VAA confirmed completed on L1 (Ethereum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

    Number of calls: 0

      205 |       mockVaaToSerialize,
      206 |     );
    > 207 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(
          |                                   ^
      208 |       expect.stringContaining(
      209 |         `Token bridge transfer VAA confirmed completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${L2_EXAMPLE_TX_HASH}`,
      210 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:207:35)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.5: L2 Tx Reverted - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "L2 transaction 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc failed (reverted), cannot fetch VAA. Receipt: {
      \"to\": \"0xtoaddressmock\",
      \"from\": \"0xfromaddressmock\",
      \"contractAddress\": \"0xcontractaddressmock\",
      \"transactionIndex\": 1,
      \"gasUsed\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x5208\"
      },
      \"logsBloom\": \"0xlogsBloommMock\",
      \"blockHash\": \"0xblockhashmock\",
      \"blockNumber\": 1234567,
      \"confirmations\": 10,
      \"cumulativeGasUsed\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x0186a0\"
      },
      \"effectiveGasPrice\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x02540be400\"
      },
      \"byzantium\": true,
      \"type\": 2,
      \"status\": 0,
      \"logs\": [],
      \"root\": \"0xrootmock\",
      \"transactionHash\": \"0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"
    }", Any<Error>

    Number of calls: 0

      227 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(l2TxRevertedHash);
      228 |     expect(mocks.mockL2ChainContext.parseTransaction).not.toHaveBeenCalled();
    > 229 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      230 |       `L2 transaction ${l2TxRevertedHash} failed (reverted), cannot fetch VAA. Receipt: ${stringifyWithBigInt(revertedReceipt)}`,
      231 |       expect.any(Error),
      232 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:229:39)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "No Wormhole messages found in L2 transaction 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. Chain: Sui.", Any<Error>

    Number of calls: 0

      266 |     expect(result).toBeNull();
      267 |     expect(mocks.mockWormholeInstance.getChain).toHaveBeenCalledWith(scenario.l2ChainName);
    > 268 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      269 |       `No Wormhole messages found in L2 transaction ${l2TxNoMessageHash}. Chain: ${scenario.l2ChainName}.`,
      270 |       expect.any(Error),
      271 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:268:39)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.8: VAA emitter address mismatch

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Could not find Wormhole message from emitter 0x1111111111111111111111111111111111111111 on chain Sui in L2 transaction 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. Found messages: [
      {
        \"chain\": \"Sui\",
        \"emitter\": {
          \"address\": {
            \"0\": 255,
            \"1\": 255,
            \"2\": 255,
            \"3\": 255,
            \"4\": 255,
            \"5\": 255,
            \"6\": 255,
            \"7\": 255,
            \"8\": 255,
            \"9\": 255,
            \"10\": 255,
            \"11\": 255,
            \"12\": 255,
            \"13\": 255,
            \"14\": 255,
            \"15\": 255,
            \"16\": 255,
            \"17\": 255,
            \"18\": 255,
            \"19\": 255,
            \"20\": 255,
            \"21\": 255,
            \"22\": 255,
            \"23\": 255,
            \"24\": 255,
            \"25\": 255,
            \"26\": 255,
            \"27\": 255,
            \"28\": 255,
            \"29\": 255,
            \"30\": 255,
            \"31\": 255
          }
        },
        \"sequence\": \"123\"
      }
    ]", ObjectContaining {"message": "Relevant WormholeMessageId not found"}

    Number of calls: 0

      327 |
      328 |     // Expect the log from the 'if (!messageId)' block in the service
    > 329 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      330 |       `Could not find Wormhole message from emitter ${scenario.expectedEmitterAddress} on chain ${actualChainIdToChain(scenario.l2ChainId)} in L2 transaction ${l2TxEmitterMismatchHash}. Found messages: ${stringifyWithBigInt([localMockWormholeMessageId])}`,
      331 |       expect.objectContaining({ message: 'Relevant WormholeMessageId not found' }),
      332 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:329:39)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.9: isTransferCompleted Returns False - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Token bridge transfer VAA not completed on L1 (Ethereum) for 0x1111111111111111111111111111111111111111111111111111111111111111. VAA Seq: 123, Type: TransferWithPayload", ObjectContaining {"message": "VAA transfer not completed on L1"}

    Number of calls: 0

      368 |     // If this were a less severe "still pending" state, logger.info might be better.
      369 |     // For now, aligning test with current service log output.
    > 370 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      371 |       `Token bridge transfer VAA not completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${l2TxTransferNotCompletedHash}. VAA Seq: ${mockParsedVaa.sequence}, Type: ${mockParsedVaa.payloadName}`,
      372 |       expect.objectContaining({ message: 'VAA transfer not completed on L1' }),
      373 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:370:39)

  ● WormholeVaaService E2E for Sui (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.10: isTransferCompleted Throws Error - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Error checking VAA completion on L1 (Ethereum): RPC error on target chain", [Error: RPC error on target chain]

    Number of calls: 0

      408 |     );
      409 |     // Aligning test with the actual log message from the service
    > 410 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      411 |       `Error checking VAA completion on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}): ${redemptionCheckError.message}`,
      412 |       redemptionCheckError, // The error object itself is passed as the second argument
      413 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:410:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.1 & 13.4: Successfully fetches and verifies a VAA (VAA with .bytes)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Token bridge transfer VAA confirmed completed on L1 (Ethereum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

    Number of calls: 0

      108 |       mockParsedVaa,
      109 |     );
    > 110 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(
          |                                   ^
      111 |       expect.stringContaining(
      112 |         `Token bridge transfer VAA confirmed completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${L2_EXAMPLE_TX_HASH}`,
      113 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:110:35)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.7: Handles VAA not found from SDK (getVaa returns null for both types)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "this.wh.getVaa did not return a VAA for message ID {
      \"chain\": \"Avalanche\",
      \"emitter\": {
        \"address\": {
          \"0\": 0,
          \"1\": 0,
          \"2\": 0,
          \"3\": 0,
          \"4\": 0,
          \"5\": 0,
          \"6\": 0,
          \"7\": 0,
          \"8\": 0,
          \"9\": 0,
          \"10\": 0,
          \"11\": 0,
          \"12\": 17,
          \"13\": 17,
          \"14\": 17,
          \"15\": 17,
          \"16\": 17,
          \"17\": 17,
          \"18\": 17,
          \"19\": 17,
          \"20\": 17,
          \"21\": 17,
          \"22\": 17,
          \"23\": 17,
          \"24\": 17,
          \"25\": 17,
          \"26\": 17,
          \"27\": 17,
          \"28\": 17,
          \"29\": 17,
          \"30\": 17,
          \"31\": 17
        }
      },
      \"sequence\": \"124\"
    } after trying all discriminators", Any<Error>

    Number of calls: 0

      150 |     );
      151 |     expect(mocks.mockGetVaaSdkImplementation).toHaveBeenCalledTimes(2);
    > 152 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      153 |       expect.stringContaining(
      154 |         `this.wh.getVaa did not return a VAA for message ID ${stringifyWithBigInt(localMockWormholeMessageId)} after trying all discriminators`,
      155 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:152:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.4: Successfully fetches and verifies a VAA as 'TokenBridge:Transfer' (VAA with .serialize)

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "Token bridge transfer VAA confirmed completed on L1 (Ethereum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

    Number of calls: 0

      205 |       mockVaaToSerialize,
      206 |     );
    > 207 |     expect(mocks.mockLogger.info).toHaveBeenCalledWith(
          |                                   ^
      208 |       expect.stringContaining(
      209 |         `Token bridge transfer VAA confirmed completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${L2_EXAMPLE_TX_HASH}`,
      210 |       ),

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:207:35)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.5: L2 Tx Reverted - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "L2 transaction 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc failed (reverted), cannot fetch VAA. Receipt: {
      \"to\": \"0xtoaddressmock\",
      \"from\": \"0xfromaddressmock\",
      \"contractAddress\": \"0xcontractaddressmock\",
      \"transactionIndex\": 1,
      \"gasUsed\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x5208\"
      },
      \"logsBloom\": \"0xlogsBloommMock\",
      \"blockHash\": \"0xblockhashmock\",
      \"blockNumber\": 1234567,
      \"confirmations\": 10,
      \"cumulativeGasUsed\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x0186a0\"
      },
      \"effectiveGasPrice\": {
        \"type\": \"BigNumber\",
        \"hex\": \"0x02540be400\"
      },
      \"byzantium\": true,
      \"type\": 2,
      \"status\": 0,
      \"logs\": [],
      \"root\": \"0xrootmock\",
      \"transactionHash\": \"0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"
    }", Any<Error>

    Number of calls: 0

      227 |     expect(mocks.mockL2Provider.getTransactionReceipt).toHaveBeenCalledWith(l2TxRevertedHash);
      228 |     expect(mocks.mockL2ChainContext.parseTransaction).not.toHaveBeenCalled();
    > 229 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      230 |       `L2 transaction ${l2TxRevertedHash} failed (reverted), cannot fetch VAA. Receipt: ${stringifyWithBigInt(revertedReceipt)}`,
      231 |       expect.any(Error),
      232 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:229:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.6: No Wormhole Message from parseTransaction - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "No Wormhole messages found in L2 transaction 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. Chain: Avalanche.", Any<Error>

    Number of calls: 0

      266 |     expect(result).toBeNull();
      267 |     expect(mocks.mockWormholeInstance.getChain).toHaveBeenCalledWith(scenario.l2ChainName);
    > 268 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      269 |       `No Wormhole messages found in L2 transaction ${l2TxNoMessageHash}. Chain: ${scenario.l2ChainName}.`,
      270 |       expect.any(Error),
      271 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:268:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.8: VAA emitter address mismatch

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Could not find Wormhole message from emitter 0x1111111111111111111111111111111111111111 on chain Avalanche in L2 transaction 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. Found messages: [
      {
        \"chain\": \"Avalanche\",
        \"emitter\": {
          \"address\": {
            \"0\": 255,
            \"1\": 255,
            \"2\": 255,
            \"3\": 255,
            \"4\": 255,
            \"5\": 255,
            \"6\": 255,
            \"7\": 255,
            \"8\": 255,
            \"9\": 255,
            \"10\": 255,
            \"11\": 255,
            \"12\": 255,
            \"13\": 255,
            \"14\": 255,
            \"15\": 255,
            \"16\": 255,
            \"17\": 255,
            \"18\": 255,
            \"19\": 255,
            \"20\": 255,
            \"21\": 255,
            \"22\": 255,
            \"23\": 255,
            \"24\": 255,
            \"25\": 255,
            \"26\": 255,
            \"27\": 255,
            \"28\": 255,
            \"29\": 255,
            \"30\": 255,
            \"31\": 255
          }
        },
        \"sequence\": \"123\"
      }
    ]", ObjectContaining {"message": "Relevant WormholeMessageId not found"}

    Number of calls: 0

      327 |
      328 |     // Expect the log from the 'if (!messageId)' block in the service
    > 329 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      330 |       `Could not find Wormhole message from emitter ${scenario.expectedEmitterAddress} on chain ${actualChainIdToChain(scenario.l2ChainId)} in L2 transaction ${l2TxEmitterMismatchHash}. Found messages: ${stringifyWithBigInt([localMockWormholeMessageId])}`,
      331 |       expect.objectContaining({ message: 'Relevant WormholeMessageId not found' }),
      332 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:329:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.9: isTransferCompleted Returns False - should return null and log info

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Token bridge transfer VAA not completed on L1 (Ethereum) for 0x1111111111111111111111111111111111111111111111111111111111111111. VAA Seq: 123, Type: TransferWithPayload", ObjectContaining {"message": "VAA transfer not completed on L1"}

    Number of calls: 0

      368 |     // If this were a less severe "still pending" state, logger.info might be better.
      369 |     // For now, aligning test with current service log output.
    > 370 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      371 |       `Token bridge transfer VAA not completed on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}) for ${l2TxTransferNotCompletedHash}. VAA Seq: ${mockParsedVaa.sequence}, Type: ${mockParsedVaa.payloadName}`,
      372 |       expect.objectContaining({ message: 'VAA transfer not completed on L1' }),
      373 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:370:39)

  ● WormholeVaaService E2E for Avalanche (L2) -> Ethereum (L1) (SDK mocks) › Subtask 13.10: isTransferCompleted Throws Error - should return null and log error

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "Error checking VAA completion on L1 (Ethereum): RPC error on target chain", [Error: RPC error on target chain]

    Number of calls: 0

      408 |     );
      409 |     // Aligning test with the actual log message from the service
    > 410 |     expect(mocks.mockLogErrorContext).toHaveBeenCalledWith(
          |                                       ^
      411 |       `Error checking VAA completion on L1 (${actualChainIdToChain(scenario.targetL1ChainId)}): ${redemptionCheckError.message}`,
      412 |       redemptionCheckError, // The error object itself is passed as the second argument
      413 |     );

      at Object.<anonymous> (tests/e2e/wormhole.vaa.service.e2e.test.ts:410:39)

[2025-05-28 08:56:04.679 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.683 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.683 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.684 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.684 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. TxHash for parse: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.684 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Sui, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.684 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.685 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.687 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Sui / 0x1111111111111111111111111111111111111111. Actual Emitter: Sui / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.688 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Sui, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.690 +0200] [32mINFO[39m: [36mToken bridge transfer VAA confirmed completed on L1 (Arbitrum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. Type: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.691 +0200] [32mINFO[39m: [36mVAA fetched and verified (including L1 completion) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.711 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.712 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.712 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.712 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.712 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. TxHash for parse: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.713 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Sui, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 124.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.713 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.713 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:Transfer, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.714 +0200] [31mERROR[39m: [36m[REAL WormholeVaaService] this.wh.getVaa did not return a VAA for message ID {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
} after trying all discriminators. Last error: undefined[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "this.wh.getVaa failed or returned null VAA after all retries",
      "stack":
          Error: this.wh.getVaa failed or returned null VAA after all retries
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:221:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:133:20)
    }
[2025-05-28 08:56:04.722 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.723 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.723 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.723 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.723 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. TxHash for parse: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.724 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Sui, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.724 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.724 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:Transfer, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.724 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.725 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Sui / 0x1111111111111111111111111111111111111111. Actual Emitter: Sui / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.725 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Sui, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.726 +0200] [32mINFO[39m: [36mToken bridge transfer VAA confirmed completed on L1 (Arbitrum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. Type: Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.727 +0200] [32mINFO[39m: [36mVAA fetched and verified (including L1 completion) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.731 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.732 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.732 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.732 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.732 +0200] [31mERROR[39m: [36mL2 transaction 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc failed (reverted), cannot fetch VAA. Receipt: {
  "to": "0xtoaddressmock",
  "from": "0xfromaddressmock",
  "contractAddress": "0xcontractaddressmock",
  "transactionIndex": 1,
  "gasUsed": {
    "type": "BigNumber",
    "hex": "0x5208"
  },
  "logsBloom": "0xlogsBloommMock",
  "blockHash": "0xblockhashmock",
  "blockNumber": 1234567,
  "confirmations": 10,
  "cumulativeGasUsed": {
    "type": "BigNumber",
    "hex": "0x0186a0"
  },
  "effectiveGasPrice": {
    "type": "BigNumber",
    "hex": "0x02540be400"
  },
  "byzantium": true,
  "type": 2,
  "status": 0,
  "logs": [],
  "root": "0xrootmock",
  "transactionHash": "0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
}[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "L2 tx reverted",
      "stack":
          Error: L2 tx reverted
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:139:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:219:20)
    }
[2025-05-28 08:56:04.735 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.736 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.736 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.736 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.736 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. TxHash for parse: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.736 +0200] [31mERROR[39m: [36mNo Wormhole messages found in L2 transaction 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. Chain: Sui.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "parseTransaction returned no messages",
      "stack":
          Error: parseTransaction returned no messages
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:156:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:259:20)
    }
[2025-05-28 08:56:04.739 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.740 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.740 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.740 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.740 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. TxHash for parse: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.740 +0200] [31mERROR[39m: [36mCould not find Wormhole message from emitter 0x1111111111111111111111111111111111111111 on chain Sui in L2 transaction 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. Found messages: [
  {
    "chain": "Sui",
    "emitter": {
      "address": {
        "0": 255,
        "1": 255,
        "2": 255,
        "3": 255,
        "4": 255,
        "5": 255,
        "6": 255,
        "7": 255,
        "8": 255,
        "9": 255,
        "10": 255,
        "11": 255,
        "12": 255,
        "13": 255,
        "14": 255,
        "15": 255,
        "16": 255,
        "17": 255,
        "18": 255,
        "19": 255,
        "20": 255,
        "21": 255,
        "22": 255,
        "23": 255,
        "24": 255,
        "25": 255,
        "26": 255,
        "27": 255,
        "28": 255,
        "29": 255,
        "30": 255,
        "31": 255
      }
    },
    "sequence": "123"
  }
][39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "Relevant WormholeMessageId not found",
      "stack":
          Error: Relevant WormholeMessageId not found
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:169:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:316:20)
    }
[2025-05-28 08:56:04.744 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.745 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0x1111111111111111111111111111111111111111111111111111111111111111, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.745 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.745 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.745 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0x1111111111111111111111111111111111111111111111111111111111111111. TxHash for parse: 0x1111111111111111111111111111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.745 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Sui, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.745 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.745 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.746 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Sui / 0x1111111111111111111111111111111111111111. Actual Emitter: Sui / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.746 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Sui, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.747 +0200] [31mERROR[39m: [36mToken bridge transfer VAA not completed on L1 (Arbitrum) for 0x1111111111111111111111111111111111111111111111111111111111111111. VAA Seq: 123, Type: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "VAA transfer not completed on L1",
      "stack":
          Error: VAA transfer not completed on L1
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:261:15)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:356:20)
    }
[2025-05-28 08:56:04.750 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.751 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0x2222222222222222222222222222222222222222222222222222222222222222, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.751 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.751 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.751 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0x2222222222222222222222222222222222222222222222222222222222222222. TxHash for parse: 0x2222222222222222222222222222222222222222222222222222222222222222[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.751 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Sui, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.751 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.752 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.752 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Sui / 0x1111111111111111111111111111111111111111. Actual Emitter: Sui / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.752 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Sui, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.753 +0200] [31mERROR[39m: [36mError checking VAA completion on L1 (Arbitrum): RPC error on target chain[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "RPC error on target chain",
      "stack":
          Error: RPC error on target chain
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:395:34)
              at Promise.then.completed (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/utils.js:298:28)
              at new Promise (<anonymous>)
              at callAsyncCircusFn (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/utils.js:231:10)
              at _callCircusTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:316:40)
              at _runTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:252:3)
              at _runTestsForDescribeBlock (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:126:9)
              at _runTestsForDescribeBlock (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:121:9)
              at run (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:71:3)
              at runAndTransformResultsToJestFormat (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
              at jestAdapter (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:70:21)
              at runTestInternal (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-runner/build/runTest.js:292:22)
              at runTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-runner/build/runTest.js:354:38)
    }
[2025-05-28 08:56:04.759 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.765 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.766 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.766 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.766 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.766 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. TxHash for parse: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.766 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Avalanche, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.766 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.767 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.767 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Avalanche / 0x1111111111111111111111111111111111111111. Actual Emitter: Avalanche / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.767 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Avalanche, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.769 +0200] [32mINFO[39m: [36mToken bridge transfer VAA confirmed completed on L1 (Arbitrum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. Type: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.769 +0200] [32mINFO[39m: [36mVAA fetched and verified (including L1 completion) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.775 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.776 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.776 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.776 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.776 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. TxHash for parse: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.776 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Avalanche, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 124.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.776 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.777 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:Transfer, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.777 +0200] [31mERROR[39m: [36m[REAL WormholeVaaService] this.wh.getVaa did not return a VAA for message ID {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
} after trying all discriminators. Last error: undefined[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "this.wh.getVaa failed or returned null VAA after all retries",
      "stack":
          Error: this.wh.getVaa failed or returned null VAA after all retries
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:221:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:133:20)
    }
[2025-05-28 08:56:04.781 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.782 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.782 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.782 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.782 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. TxHash for parse: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.782 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Avalanche, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.782 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.782 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:Transfer, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.782 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.783 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Avalanche / 0x1111111111111111111111111111111111111111. Actual Emitter: Avalanche / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.783 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Avalanche, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.784 +0200] [32mINFO[39m: [36mToken bridge transfer VAA confirmed completed on L1 (Arbitrum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. Type: Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.785 +0200] [32mINFO[39m: [36mVAA fetched and verified (including L1 completion) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.788 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.789 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.789 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.789 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.789 +0200] [31mERROR[39m: [36mL2 transaction 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc failed (reverted), cannot fetch VAA. Receipt: {
  "to": "0xtoaddressmock",
  "from": "0xfromaddressmock",
  "contractAddress": "0xcontractaddressmock",
  "transactionIndex": 1,
  "gasUsed": {
    "type": "BigNumber",
    "hex": "0x5208"
  },
  "logsBloom": "0xlogsBloommMock",
  "blockHash": "0xblockhashmock",
  "blockNumber": 1234567,
  "confirmations": 10,
  "cumulativeGasUsed": {
    "type": "BigNumber",
    "hex": "0x0186a0"
  },
  "effectiveGasPrice": {
    "type": "BigNumber",
    "hex": "0x02540be400"
  },
  "byzantium": true,
  "type": 2,
  "status": 0,
  "logs": [],
  "root": "0xrootmock",
  "transactionHash": "0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
}[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "L2 tx reverted",
      "stack":
          Error: L2 tx reverted
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:139:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:219:20)
    }
[2025-05-28 08:56:04.791 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.792 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.792 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.792 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.792 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. TxHash for parse: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.792 +0200] [31mERROR[39m: [36mNo Wormhole messages found in L2 transaction 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. Chain: Avalanche.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "parseTransaction returned no messages",
      "stack":
          Error: parseTransaction returned no messages
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:156:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:259:20)
    }
[2025-05-28 08:56:04.795 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.796 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.796 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.796 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.796 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. TxHash for parse: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.796 +0200] [31mERROR[39m: [36mCould not find Wormhole message from emitter 0x1111111111111111111111111111111111111111 on chain Avalanche in L2 transaction 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. Found messages: [
  {
    "chain": "Avalanche",
    "emitter": {
      "address": {
        "0": 255,
        "1": 255,
        "2": 255,
        "3": 255,
        "4": 255,
        "5": 255,
        "6": 255,
        "7": 255,
        "8": 255,
        "9": 255,
        "10": 255,
        "11": 255,
        "12": 255,
        "13": 255,
        "14": 255,
        "15": 255,
        "16": 255,
        "17": 255,
        "18": 255,
        "19": 255,
        "20": 255,
        "21": 255,
        "22": 255,
        "23": 255,
        "24": 255,
        "25": 255,
        "26": 255,
        "27": 255,
        "28": 255,
        "29": 255,
        "30": 255,
        "31": 255
      }
    },
    "sequence": "123"
  }
][39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "Relevant WormholeMessageId not found",
      "stack":
          Error: Relevant WormholeMessageId not found
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:169:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:316:20)
    }
[2025-05-28 08:56:04.798 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.799 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0x1111111111111111111111111111111111111111111111111111111111111111, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.799 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.799 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.799 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0x1111111111111111111111111111111111111111111111111111111111111111. TxHash for parse: 0x1111111111111111111111111111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.799 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Avalanche, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.799 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.800 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.800 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Avalanche / 0x1111111111111111111111111111111111111111. Actual Emitter: Avalanche / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.800 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Avalanche, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.801 +0200] [31mERROR[39m: [36mToken bridge transfer VAA not completed on L1 (Arbitrum) for 0x1111111111111111111111111111111111111111111111111111111111111111. VAA Seq: 123, Type: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "VAA transfer not completed on L1",
      "stack":
          Error: VAA transfer not completed on L1
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:261:15)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:356:20)
    }
[2025-05-28 08:56:04.804 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.805 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0x2222222222222222222222222222222222222222222222222222222222222222, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.805 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.805 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.805 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0x2222222222222222222222222222222222222222222222222222222222222222. TxHash for parse: 0x2222222222222222222222222222222222222222222222222222222222222222[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.805 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Avalanche, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.805 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.805 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.806 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Avalanche / 0x1111111111111111111111111111111111111111. Actual Emitter: Avalanche / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.806 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Avalanche, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.806 +0200] [31mERROR[39m: [36mError checking VAA completion on L1 (Arbitrum): RPC error on target chain[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "RPC error on target chain",
      "stack":
          Error: RPC error on target chain
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:395:34)
              at Promise.then.completed (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/utils.js:298:28)
              at new Promise (<anonymous>)
              at callAsyncCircusFn (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/utils.js:231:10)
              at _callCircusTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:316:40)
              at _runTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:252:3)
              at _runTestsForDescribeBlock (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:126:9)
              at _runTestsForDescribeBlock (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:121:9)
              at run (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:71:3)
              at runAndTransformResultsToJestFormat (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
              at jestAdapter (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:70:21)
              at runTestInternal (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-runner/build/runTest.js:292:22)
              at runTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-runner/build/runTest.js:354:38)
    }
[2025-05-28 08:56:04.809 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.812 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.813 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.813 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.813 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.813 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. TxHash for parse: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.813 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Sui, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.813 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.813 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.814 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Sui / 0x1111111111111111111111111111111111111111. Actual Emitter: Sui / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.814 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Sui, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.815 +0200] [32mINFO[39m: [36mToken bridge transfer VAA confirmed completed on L1 (Ethereum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. Type: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.816 +0200] [32mINFO[39m: [36mVAA fetched and verified (including L1 completion) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.824 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.825 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.825 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.825 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.825 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. TxHash for parse: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.825 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Sui, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 124.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.825 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.825 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:Transfer, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.826 +0200] [31mERROR[39m: [36m[REAL WormholeVaaService] this.wh.getVaa did not return a VAA for message ID {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
} after trying all discriminators. Last error: undefined[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "this.wh.getVaa failed or returned null VAA after all retries",
      "stack":
          Error: this.wh.getVaa failed or returned null VAA after all retries
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:221:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:133:20)
    }
[2025-05-28 08:56:04.829 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.830 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.830 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.830 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.830 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. TxHash for parse: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.830 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Sui, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.830 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.830 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:Transfer, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.830 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.831 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Sui / 0x1111111111111111111111111111111111111111. Actual Emitter: Sui / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.831 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Sui, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.832 +0200] [32mINFO[39m: [36mToken bridge transfer VAA confirmed completed on L1 (Ethereum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. Type: Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.833 +0200] [32mINFO[39m: [36mVAA fetched and verified (including L1 completion) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.836 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.837 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.837 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.837 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.837 +0200] [31mERROR[39m: [36mL2 transaction 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc failed (reverted), cannot fetch VAA. Receipt: {
  "to": "0xtoaddressmock",
  "from": "0xfromaddressmock",
  "contractAddress": "0xcontractaddressmock",
  "transactionIndex": 1,
  "gasUsed": {
    "type": "BigNumber",
    "hex": "0x5208"
  },
  "logsBloom": "0xlogsBloommMock",
  "blockHash": "0xblockhashmock",
  "blockNumber": 1234567,
  "confirmations": 10,
  "cumulativeGasUsed": {
    "type": "BigNumber",
    "hex": "0x0186a0"
  },
  "effectiveGasPrice": {
    "type": "BigNumber",
    "hex": "0x02540be400"
  },
  "byzantium": true,
  "type": 2,
  "status": 0,
  "logs": [],
  "root": "0xrootmock",
  "transactionHash": "0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
}[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "L2 tx reverted",
      "stack":
          Error: L2 tx reverted
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:139:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:219:20)
    }
[2025-05-28 08:56:04.841 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.842 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.842 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.842 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.842 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. TxHash for parse: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.842 +0200] [31mERROR[39m: [36mNo Wormhole messages found in L2 transaction 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. Chain: Sui.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "parseTransaction returned no messages",
      "stack":
          Error: parseTransaction returned no messages
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:156:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:259:20)
    }
[2025-05-28 08:56:04.847 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.848 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.848 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.848 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.848 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. TxHash for parse: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.848 +0200] [31mERROR[39m: [36mCould not find Wormhole message from emitter 0x1111111111111111111111111111111111111111 on chain Sui in L2 transaction 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. Found messages: [
  {
    "chain": "Sui",
    "emitter": {
      "address": {
        "0": 255,
        "1": 255,
        "2": 255,
        "3": 255,
        "4": 255,
        "5": 255,
        "6": 255,
        "7": 255,
        "8": 255,
        "9": 255,
        "10": 255,
        "11": 255,
        "12": 255,
        "13": 255,
        "14": 255,
        "15": 255,
        "16": 255,
        "17": 255,
        "18": 255,
        "19": 255,
        "20": 255,
        "21": 255,
        "22": 255,
        "23": 255,
        "24": 255,
        "25": 255,
        "26": 255,
        "27": 255,
        "28": 255,
        "29": 255,
        "30": 255,
        "31": 255
      }
    },
    "sequence": "123"
  }
][39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "Relevant WormholeMessageId not found",
      "stack":
          Error: Relevant WormholeMessageId not found
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:169:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:316:20)
    }
[2025-05-28 08:56:04.851 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.852 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0x1111111111111111111111111111111111111111111111111111111111111111, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.852 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.852 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.852 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0x1111111111111111111111111111111111111111111111111111111111111111. TxHash for parse: 0x1111111111111111111111111111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.853 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Sui, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.853 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.853 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.854 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Sui / 0x1111111111111111111111111111111111111111. Actual Emitter: Sui / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.854 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Sui, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.855 +0200] [31mERROR[39m: [36mToken bridge transfer VAA not completed on L1 (Ethereum) for 0x1111111111111111111111111111111111111111111111111111111111111111. VAA Seq: 123, Type: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "VAA transfer not completed on L1",
      "stack":
          Error: VAA transfer not completed on L1
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:261:15)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:356:20)
    }
[2025-05-28 08:56:04.858 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.859 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0x2222222222222222222222222222222222222222222222222222222222222222, EmitterChain: Sui, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.859 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.859 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.859 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0x2222222222222222222222222222222222222222222222222222222222222222. TxHash for parse: 0x2222222222222222222222222222222222222222222222222222222222222222[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.859 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Sui, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.859 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Sui",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.860 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.860 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Sui / 0x1111111111111111111111111111111111111111. Actual Emitter: Sui / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.860 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Sui, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.861 +0200] [31mERROR[39m: [36mError checking VAA completion on L1 (Ethereum): RPC error on target chain[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "RPC error on target chain",
      "stack":
          Error: RPC error on target chain
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:395:34)
              at Promise.then.completed (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/utils.js:298:28)
              at new Promise (<anonymous>)
              at callAsyncCircusFn (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/utils.js:231:10)
              at _callCircusTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:316:40)
              at _runTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:252:3)
              at _runTestsForDescribeBlock (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:126:9)
              at _runTestsForDescribeBlock (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:121:9)
              at run (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:71:3)
              at runAndTransformResultsToJestFormat (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
              at jestAdapter (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:70:21)
              at runTestInternal (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-runner/build/runTest.js:292:22)
              at runTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-runner/build/runTest.js:354:38)
    }
[2025-05-28 08:56:04.864 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.867 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.868 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
  console.log
    [tests/setup.ts] Minimal version - providing mock helpers only

      at Object.<anonymous> (tests/setup.ts:1:9)

[2025-05-28 08:56:04.868 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.868 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.868 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. TxHash for parse: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.868 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Avalanche, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.868 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.868 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.869 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Avalanche / 0x1111111111111111111111111111111111111111. Actual Emitter: Avalanche / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.869 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Avalanche, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.870 +0200] [32mINFO[39m: [36mToken bridge transfer VAA confirmed completed on L1 (Ethereum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. Type: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.871 +0200] [32mINFO[39m: [36mVAA fetched and verified (including L1 completion) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.874 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.877 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.877 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.877 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.877 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb. TxHash for parse: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.877 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Avalanche, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 124.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.877 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.877 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:Transfer, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.878 +0200] [31mERROR[39m: [36m[REAL WormholeVaaService] this.wh.getVaa did not return a VAA for message ID {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "124"
} after trying all discriminators. Last error: undefined[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "this.wh.getVaa failed or returned null VAA after all retries",
      "stack":
          Error: this.wh.getVaa failed or returned null VAA after all retries
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:221:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:133:20)
    }
[2025-05-28 08:56:04.880 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.881 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.881 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.881 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.881 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. TxHash for parse: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.881 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Avalanche, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.881 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.882 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:Transfer, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.882 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.882 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Avalanche / 0x1111111111111111111111111111111111111111. Actual Emitter: Avalanche / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.883 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Avalanche, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.884 +0200] [32mINFO[39m: [36mToken bridge transfer VAA confirmed completed on L1 (Ethereum) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa. Type: Transfer[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.884 +0200] [32mINFO[39m: [36mVAA fetched and verified (including L1 completion) for 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.887 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.888 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.888 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.888 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.888 +0200] [31mERROR[39m: [36mL2 transaction 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc failed (reverted), cannot fetch VAA. Receipt: {
  "to": "0xtoaddressmock",
  "from": "0xfromaddressmock",
  "contractAddress": "0xcontractaddressmock",
  "transactionIndex": 1,
  "gasUsed": {
    "type": "BigNumber",
    "hex": "0x5208"
  },
  "logsBloom": "0xlogsBloommMock",
  "blockHash": "0xblockhashmock",
  "blockNumber": 1234567,
  "confirmations": 10,
  "cumulativeGasUsed": {
    "type": "BigNumber",
    "hex": "0x0186a0"
  },
  "effectiveGasPrice": {
    "type": "BigNumber",
    "hex": "0x02540be400"
  },
  "byzantium": true,
  "type": 2,
  "status": 0,
  "logs": [],
  "root": "0xrootmock",
  "transactionHash": "0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
}[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "L2 tx reverted",
      "stack":
          Error: L2 tx reverted
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:139:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:219:20)
    }
[2025-05-28 08:56:04.890 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.891 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.891 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.891 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.891 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. TxHash for parse: 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.891 +0200] [31mERROR[39m: [36mNo Wormhole messages found in L2 transaction 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd. Chain: Avalanche.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "parseTransaction returned no messages",
      "stack":
          Error: parseTransaction returned no messages
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:156:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:259:20)
    }
[2025-05-28 08:56:04.893 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.894 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.894 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.894 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.894 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. TxHash for parse: 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.894 +0200] [31mERROR[39m: [36mCould not find Wormhole message from emitter 0x1111111111111111111111111111111111111111 on chain Avalanche in L2 transaction 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee. Found messages: [
  {
    "chain": "Avalanche",
    "emitter": {
      "address": {
        "0": 255,
        "1": 255,
        "2": 255,
        "3": 255,
        "4": 255,
        "5": 255,
        "6": 255,
        "7": 255,
        "8": 255,
        "9": 255,
        "10": 255,
        "11": 255,
        "12": 255,
        "13": 255,
        "14": 255,
        "15": 255,
        "16": 255,
        "17": 255,
        "18": 255,
        "19": 255,
        "20": 255,
        "21": 255,
        "22": 255,
        "23": 255,
        "24": 255,
        "25": 255,
        "26": 255,
        "27": 255,
        "28": 255,
        "29": 255,
        "30": 255,
        "31": 255
      }
    },
    "sequence": "123"
  }
][39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "Relevant WormholeMessageId not found",
      "stack":
          Error: Relevant WormholeMessageId not found
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:169:11)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:316:20)
    }
[2025-05-28 08:56:04.896 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.897 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0x1111111111111111111111111111111111111111111111111111111111111111, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.897 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.897 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.897 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0x1111111111111111111111111111111111111111111111111111111111111111. TxHash for parse: 0x1111111111111111111111111111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.897 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Avalanche, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.897 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.897 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.898 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Avalanche / 0x1111111111111111111111111111111111111111. Actual Emitter: Avalanche / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.898 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Avalanche, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.899 +0200] [31mERROR[39m: [36mToken bridge transfer VAA not completed on L1 (Ethereum) for 0x1111111111111111111111111111111111111111111111111111111111111111. VAA Seq: 123, Type: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "VAA transfer not completed on L1",
      "stack":
          Error: VAA transfer not completed on L1
              at WormholeVaaService.fetchAndVerifyVaaForL2Event (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:261:15)
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:356:20)
    }
[2025-05-28 08:56:04.901 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.902 +0200] [32mINFO[39m: [36mAttempting to fetch VAA for L2 transaction: 0x2222222222222222222222222222222222222222222222222222222222222222, EmitterChain: Avalanche, EmitterAddr: 0x1111111111111111111111111111111111111111[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.902 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] About to call this.l2Provider.getTransactionReceipt[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.902 +0200] [34mDEBUG[39m: [36m[REAL WormholeVaaService] Result from getTransactionReceipt:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.902 +0200] [32mINFO[39m: [36mSuccessfully fetched L2 transaction receipt for 0x2222222222222222222222222222222222222222222222222222222222222222. TxHash for parse: 0x2222222222222222222222222222222222222222222222222222222222222222[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.902 +0200] [32mINFO[39m: [36mSuccessfully parsed Wormhole message ID: Chain: Avalanche, Emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, Sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.902 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Attempting this.wh.getVaa with discriminator: TokenBridge:TransferWithPayload, messageId: {
  "chain": "Avalanche",
  "emitter": {
    "address": {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 17,
      "13": 17,
      "14": 17,
      "15": 17,
      "16": 17,
      "17": 17,
      "18": 17,
      "19": 17,
      "20": 17,
      "21": 17,
      "22": 17,
      "23": 17,
      "24": 17,
      "25": 17,
      "26": 17,
      "27": 17,
      "28": 17,
      "29": 17,
      "30": 17,
      "31": 17
    }
  },
  "sequence": "123"
}, timeout: 300000[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.903 +0200] [32mINFO[39m: [36m[REAL WormholeVaaService] Successfully fetched VAA with discriminator: TokenBridge:TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.903 +0200] [32mINFO[39m: [36mAttempting to verify parsed VAA. Expected Emitter: Avalanche / 0x1111111111111111111111111111111111111111. Actual Emitter: Avalanche / 0x0000000000000000000000001111111111111111111111111111111111111111. Protocol: TokenBridge, Payload: TransferWithPayload[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.903 +0200] [32mINFO[39m: [36mVAA verification passed for emitter: 0x0000000000000000000000001111111111111111111111111111111111111111, chain: Avalanche, sequence: 123.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:04.904 +0200] [31mERROR[39m: [36mError checking VAA completion on L1 (Ethereum): RPC error on target chain[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
    err: {
      "type": "Error",
      "message": "RPC error on target chain",
      "stack":
          Error: RPC error on target chain
              at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/e2e/wormhole.vaa.service.e2e.test.ts:395:34)
              at Promise.then.completed (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/utils.js:298:28)
              at new Promise (<anonymous>)
              at callAsyncCircusFn (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/utils.js:231:10)
              at _callCircusTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:316:40)
              at _runTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:252:3)
              at _runTestsForDescribeBlock (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:126:9)
              at _runTestsForDescribeBlock (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:121:9)
              at run (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:71:3)
              at runAndTransformResultsToJestFormat (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
              at jestAdapter (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:70:21)
              at runTestInternal (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-runner/build/runTest.js:292:22)
              at runTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-runner/build/runTest.js:354:38)
    }
[2025-05-28 08:56:04.906 +0200] [32mINFO[39m: [36mWormholeVaaService created. L2 Provider: provided_instance, Wormhole Network: Testnet[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
  console.log
    [tests/setup.ts] Finished execution (Minimal - SDK mock only)

      at Object.<anonymous> (tests/setup.ts:25:9)

[2025-05-28 08:56:06.602 +0200] [34mDEBUG[39m: [36mReceived reveal data via endpoint[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:06.604 +0200] [32mINFO[39m: [36mReceived L2 DepositInitialized event | ID: 27765049594946925696933928575831516539809259908079081875660924009008744228051 | Owner: 0xef3b261629e298a5af19fd104b3801764cb7e88f[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:06.665 +0200] [34mDEBUG[39m: [36mCreated deposit with ID: 27765049594946925696933928575831516539809259908079081875660924009008744228051[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:06.665 +0200] [32mINFO[39m: [36mMock chain handler: Initializing deposit 27765049594946925696933928575831516539809259908079081875660924009008744228051[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
PASS tests/integration/controllers/Endpoint.controller.test.ts (5.07 s)
  EndpointController
    handleReveal
      ✓ should successfully handle a valid reveal request (1525 ms)
      ✓ should return 400 for missing required fields (1167 ms)
    getDepositStatus
      ✓ should return status for a valid deposit ID (1026 ms)
      ✓ should return 400 for missing deposit ID (1034 ms)

  console.log
    [tests/setup.ts] Minimal version - providing mock helpers only

      at Object.<anonymous> (tests/setup.ts:1:9)

  console.log
    [tests/setup.ts] Finished execution (Minimal - SDK mock only)

      at Object.<anonymous> (tests/setup.ts:25:9)

  console.log
    [tests/setup.ts] EXECUTING @wormhole-foundation/sdk mock factory

      at tests/setup.ts:10:11

[2025-05-28 08:56:06.766 +0200] [32mINFO[39m: [36mMockChainHandler: Deposit 27765049594946925696933928575831516539809259908079081875660924009008744228051 initialized.[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:06.766 +0200] [32mINFO[39m: [36mMockChainHandler: Emitting event DepositInitialized with args:[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:07.934 +0200] [34mDEBUG[39m: [36mReceived reveal data via endpoint[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:08.960 +0200] [32mINFO[39m: [36mMockChainHandler: Adding deposit 0xee89496e88d4e7a53580ceb3cdfd1869ad1fc5d8520f0f10c5e919eb1b8a5acd[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
[2025-05-28 08:56:08.960 +0200] [32mINFO[39m: [36mMockChainHandler: Checking status for deposit 0xee89496e88d4e7a53580ceb3cdfd1869ad1fc5d8520f0f10c5e919eb1b8a5acd[39m
    appName: "TBTC CROSS-CHAIN RELAYER"
  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: 'http://localhost:8545',
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.error
    [REAL WormholeVaaService.create] wormhole SDK initialization failed: wormhole() returned null or undefined.

      72 |         const errorMessage =
      73 |           '[REAL WormholeVaaService.create] wormhole SDK initialization failed: wormhole() returned null or undefined.';
    > 74 |         console.error(errorMessage);
         |                 ^
      75 |         throw new Error(errorMessage);
      76 |       }
      77 |       console.log(

      at Function.create (services/WormholeVaaService.ts:74:17)
      at Object.<anonymous> (tests/integration/services/WormholeVaaService.test.ts:286:7)

  console.error
    [REAL WormholeVaaService.create] CAUGHT ERROR IN CREATE: [REAL WormholeVaaService.create] wormhole SDK initialization failed: wormhole() returned null or undefined. Error: [REAL WormholeVaaService.create] wormhole SDK initialization failed: wormhole() returned null or undefined.
        at Function.create (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/services/WormholeVaaService.ts:75:15)
        at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/integration/services/WormholeVaaService.test.ts:286:7)

      80 |       );
      81 |     } catch (e: any) {
    > 82 |       console.error('[REAL WormholeVaaService.create] CAUGHT ERROR IN CREATE:', e.message, e);
         |               ^
      83 |       throw e; // Re-throw to ensure original error is propagated
      84 |     }
      85 |     const l2Location = typeof l2RpcOrProvider === 'string' ? l2RpcOrProvider : 'provided_instance';

      at Function.create (services/WormholeVaaService.ts:82:15)
      at Object.<anonymous> (tests/integration/services/WormholeVaaService.test.ts:286:7)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.error
    [REAL WormholeVaaService.create] CAUGHT ERROR IN CREATE: Wormhole SDK init failed for some reason Error: Wormhole SDK init failed for some reason
        at Object.<anonymous> (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/tests/integration/services/WormholeVaaService.test.ts:292:28)
        at Promise.then.completed (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:70:21)
        at runTestInternal (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-runner/build/runTest.js:292:22)
        at runTest (/home/piotr/Documents/projects/tLabs/tbtc-crosschain-relayer-copy/node_modules/jest-runner/build/runTest.js:354:38)

      80 |       );
      81 |     } catch (e: any) {
    > 82 |       console.error('[REAL WormholeVaaService.create] CAUGHT ERROR IN CREATE:', e.message, e);
         |               ^
      83 |       throw e; // Re-throw to ensure original error is propagated
      84 |     }
      85 |     const l2Location = typeof l2RpcOrProvider === 'string' ? l2RpcOrProvider : 'provided_instance';

      at Function.create (services/WormholeVaaService.ts:82:15)
      at Object.<anonymous> (tests/integration/services/WormholeVaaService.test.ts:294:7)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "emitterChain": "Ethereum",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 0,
          "13": 0,
          "14": 0,
          "15": 0,
          "16": 0,
          "17": 0,
          "18": 0,
          "19": 0,
          "20": 0,
          "21": 0,
          "22": 0,
          "23": 0,
          "24": 0,
          "25": 0,
          "26": 0,
          "27": 0,
          "28": 0,
          "29": 0,
          "30": 222,
          "31": 173
        }
      },
      "sequence": "1",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data"
      },
      "guardianSet": 0,
      "timestamp": 1748415370,
      "nonce": 0,
      "signatures": [],
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 1n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Exists serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:Transfer: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "emitterChain": "Ethereum",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 0,
          "13": 0,
          "14": 0,
          "15": 0,
          "16": 0,
          "17": 0,
          "18": 0,
          "19": 0,
          "20": 0,
          "21": 0,
          "22": 0,
          "23": 0,
          "24": 0,
          "25": 0,
          "26": 0,
          "27": 0,
          "28": 0,
          "29": 0,
          "30": 222,
          "31": 173
        }
      },
      "sequence": "1",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "Transfer",
      "payloadLiteral": "TokenBridge:Transfer",
      "payload": {
        "basicTransfer": "info"
      },
      "guardianSet": 0,
      "timestamp": 1748415370,
      "nonce": 0,
      "signatures": [],
      "hash": {
        "0": 2,
        "1": 2,
        "2": 2,
        "3": 2,
        "4": 2,
        "5": 2,
        "6": 2,
        "7": 2,
        "8": 2,
        "9": 2,
        "10": 2,
        "11": 2,
        "12": 2,
        "13": 2,
        "14": 2,
        "15": 2,
        "16": 2,
        "17": 2,
        "18": 2,
        "19": 2,
        "20": 2,
        "21": 2,
        "22": 2,
        "23": 2,
        "24": 2,
        "25": 2,
        "26": 2,
        "27": 2,
        "28": 2,
        "29": 2,
        "30": 2,
        "31": 2
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: Transfer

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 1n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Missing/Empty serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Returning null because vaa is null after loop.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:223:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:Transfer: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: null

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Returning null because vaa is null after loop.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:223:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "emitterChain": "Solana",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 0,
          "13": 0,
          "14": 0,
          "15": 0,
          "16": 0,
          "17": 0,
          "18": 0,
          "19": 0,
          "20": 0,
          "21": 0,
          "22": 0,
          "23": 0,
          "24": 0,
          "25": 0,
          "26": 0,
          "27": 0,
          "28": 0,
          "29": 0,
          "30": 222,
          "31": 173
        }
      },
      "sequence": "1",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data"
      },
      "guardianSet": 0,
      "timestamp": 1748415370,
      "nonce": 0,
      "signatures": [],
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: false

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Returning null because verifyParsedVaa failed.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:235:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "emitterChain": "Ethereum",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 186,
          "13": 208,
          "14": 0,
          "15": 0,
          "16": 0,
          "17": 0,
          "18": 0,
          "19": 0,
          "20": 0,
          "21": 0,
          "22": 0,
          "23": 0,
          "24": 0,
          "25": 0,
          "26": 0,
          "27": 0,
          "28": 0,
          "29": 0,
          "30": 11,
          "31": 173
        }
      },
      "sequence": "1",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data"
      },
      "guardianSet": 0,
      "timestamp": 1748415370,
      "nonce": 0,
      "signatures": [],
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: false

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Returning null because verifyParsedVaa failed.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:235:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "emitterChain": "Ethereum",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 0,
          "13": 0,
          "14": 0,
          "15": 0,
          "16": 0,
          "17": 0,
          "18": 0,
          "19": 0,
          "20": 0,
          "21": 0,
          "22": 0,
          "23": 0,
          "24": 0,
          "25": 0,
          "26": 0,
          "27": 0,
          "28": 0,
          "29": 0,
          "30": 222,
          "31": 173
        }
      },
      "sequence": "1",
      "consistencyLevel": 1,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data"
      },
      "guardianSet": 0,
      "timestamp": 1748415370,
      "nonce": 0,
      "signatures": [],
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 1n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Exists serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "emitterChain": "Ethereum",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 0,
          "13": 0,
          "14": 0,
          "15": 0,
          "16": 0,
          "17": 0,
          "18": 0,
          "19": 0,
          "20": 0,
          "21": 0,
          "22": 0,
          "23": 0,
          "24": 0,
          "25": 0,
          "26": 0,
          "27": 0,
          "28": 0,
          "29": 0,
          "30": 222,
          "31": 173
        }
      },
      "sequence": "1",
      "consistencyLevel": 0,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data"
      },
      "guardianSet": 0,
      "timestamp": 1748415370,
      "nonce": 0,
      "signatures": [],
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 1n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Before extracting signedVaaBytes. VAA bytes property: Exists serialize fn: function

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:273:17)

  console.log
    [REAL WormholeVaaService] After extracting signedVaaBytes. Length: 5

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:289:17)

  console.log
    [REAL WormholeVaaService] Returning VAA object successfully.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:306:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "emitterChain": "Ethereum",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 0,
          "13": 0,
          "14": 0,
          "15": 0,
          "16": 0,
          "17": 0,
          "18": 0,
          "19": 0,
          "20": 0,
          "21": 0,
          "22": 0,
          "23": 0,
          "24": 0,
          "25": 0,
          "26": 0,
          "27": 0,
          "28": 0,
          "29": 0,
          "30": 222,
          "31": 173
        }
      },
      "sequence": "1",
      "consistencyLevel": 15,
      "protocolName": "AnotherProtocol",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data"
      },
      "guardianSet": 0,
      "timestamp": 1748415370,
      "nonce": 0,
      "signatures": [],
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: false

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Returning null because verifyParsedVaa failed.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:235:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "emitterChain": "Ethereum",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 0,
          "13": 0,
          "14": 0,
          "15": 0,
          "16": 0,
          "17": 0,
          "18": 0,
          "19": 0,
          "20": 0,
          "21": 0,
          "22": 0,
          "23": 0,
          "24": 0,
          "25": 0,
          "26": 0,
          "27": 0,
          "28": 0,
          "29": 0,
          "30": 222,
          "31": 173
        }
      },
      "sequence": "1",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "SomeOtherPayload",
      "payloadLiteral": "TokenBridge:SomeOtherPayload",
      "payload": {
        "somePayloadData": "data"
      },
      "guardianSet": 0,
      "timestamp": 1748415370,
      "nonce": 0,
      "signatures": [],
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: false

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Returning null because verifyParsedVaa failed.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:235:17)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "emitterChain": "Ethereum",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 0,
          "13": 0,
          "14": 0,
          "15": 0,
          "16": 0,
          "17": 0,
          "18": 0,
          "19": 0,
          "20": 0,
          "21": 0,
          "22": 0,
          "23": 0,
          "24": 0,
          "25": 0,
          "26": 0,
          "27": 0,
          "28": 0,
          "29": 0,
          "30": 222,
          "31": 173
        }
      },
      "sequence": "1",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data"
      },
      "guardianSet": 0,
      "timestamp": 1748415370,
      "nonce": 0,
      "signatures": [],
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 1n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

  console.log
    [REAL WormholeVaaService] After tokenBridge.isTransferCompleted. isCompleted: false

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:254:19)

  console.log
    [REAL WormholeVaaService] Returning null because isTransferCompleted is false.

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:263:21)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "emitterChain": "Ethereum",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 0,
          "13": 0,
          "14": 0,
          "15": 0,
          "16": 0,
          "17": 0,
          "18": 0,
          "19": 0,
          "20": 0,
          "21": 0,
          "22": 0,
          "23": 0,
          "24": 0,
          "25": 0,
          "26": 0,
          "27": 0,
          "28": 0,
          "29": 0,
          "30": 222,
          "31": 173
        }
      },
      "sequence": "1",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data"
      },
      "guardianSet": 0,
      "timestamp": 1748415370,
      "nonce": 0,
      "signatures": [],
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService.create CALLED] Args: {
      l2RpcOrProvider: {
        getTransactionReceipt: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        getNetwork: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)]
        },
        _isProvider: true
      },
      network: 'Testnet',
      platformModules: [
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getEvmSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        },
        {
          Address: [Function],
          Platform: [Function],
          getSigner: [AsyncFunction: getSolanaSignAndSendSigner],
          protocols: [Object],
          getChain: [Function: getChain]
        }
      ]
    }

      at Function.create (services/WormholeVaaService.ts:55:13)

  console.log
    [REAL WormholeVaaService.create] typeof wormhole IS: function isJestMock: true toString: function () {
            return fn.apply(this, arguments);
          }...

      at Function.create (services/WormholeVaaService.ts:62:15)

  console.log
    [REAL WormholeVaaService.create] service.wh initialized: OK

      at Function.create (services/WormholeVaaService.ts:77:15)

  console.log
    [REAL WormholeVaaService.fetchAndVerifyVaaForL2Event CALLED] L2 Tx: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef. this.wh is DEFINED

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:106:13)

  console.log
    [REAL WormholeVaaService] VAA attempt with TokenBridge:TransferWithPayload: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:191:19)

  console.log
    [REAL WormholeVaaService] After loop, vaa is: VAA Object

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:213:15)

  console.log
    [REAL WormholeVaaService] Before verifyParsedVaa. VAA: {
      "emitterChain": "Ethereum",
      "emitterAddress": {
        "address": {
          "0": 0,
          "1": 0,
          "2": 0,
          "3": 0,
          "4": 0,
          "5": 0,
          "6": 0,
          "7": 0,
          "8": 0,
          "9": 0,
          "10": 0,
          "11": 0,
          "12": 0,
          "13": 0,
          "14": 0,
          "15": 0,
          "16": 0,
          "17": 0,
          "18": 0,
          "19": 0,
          "20": 0,
          "21": 0,
          "22": 0,
          "23": 0,
          "24": 0,
          "25": 0,
          "26": 0,
          "27": 0,
          "28": 0,
          "29": 0,
          "30": 222,
          "31": 173
        }
      },
      "sequence": "1",
      "consistencyLevel": 15,
      "protocolName": "TokenBridge",
      "payloadName": "TransferWithPayload",
      "payloadLiteral": "TokenBridge:TransferWithPayload",
      "payload": {
        "somePayloadData": "data"
      },
      "guardianSet": 0,
      "timestamp": 1748415370,
      "nonce": 0,
      "signatures": [],
      "hash": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 1,
        "9": 1,
        "10": 1,
        "11": 1,
        "12": 1,
        "13": 1,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "18": 1,
        "19": 1,
        "20": 1,
        "21": 1,
        "22": 1,
        "23": 1,
        "24": 1,
        "25": 1,
        "26": 1,
        "27": 1,
        "28": 1,
        "29": 1,
        "30": 1,
        "31": 1
      },
      "bytes": {
        "0": 1,
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5
      }
    }

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:227:15)

  console.log
    [REAL WormholeVaaService] After verifyParsedVaa. isVaaVerified: true

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:232:15)

  console.log
    [REAL WormholeVaaService] Checking payloadName for L1 completion. vaa.payloadName: TransferWithPayload

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:244:17)

  console.log
    [REAL WormholeVaaService] Before tokenBridge.isTransferCompleted. VAA seq: 1n

      at WormholeVaaService.fetchAndVerifyVaaForL2Event (services/WormholeVaaService.ts:249:19)

PASS tests/integration/services/WormholeVaaService.test.ts
  WormholeVaaService
    create
      ✓ should successfully create an instance with a provider instance and initialize Wormhole SDK (6 ms)
      ✓ should successfully create an instance with an RPC string (this will use actual JsonRpcProvider) (12 ms)
      ✓ should throw an error if wormhole SDK initialization fails (returns null), when created with provider instance (21 ms)
      ✓ should throw an error if wormhole SDK initialization fails (throws error), when created with provider instance (5 ms)
    fetchAndVerifyVaaForL2Event
      Successful VAA Fetch and Verification
        ✓ should successfully fetch, parse, verify, and return VAA (using mock provider instance) (7 ms)
        ✓ should successfully fetch VAA when VAA has .serialize() (using mock provider instance) (7 ms)
      L2 transaction issues
        ✓ should return null if getTransactionReceipt fails to return a receipt (3 ms)
        ✓ should return null if the L2 transaction has reverted (receipt status 0) (3 ms)
      wormhole message parsing
        ✓ Test 2.3.1: Should return null if parseTransaction returns no Wormhole messages (7 ms)
        ✓ should return null if no WormholeMessageId matches the emitter address and chain (3 ms)
      getVaa() issues
        ✓ should return null if this.wh.getVaa() throws an error for both payload types (4 ms)
        ✓ Test 2.4.2: Should return null if this.wh.getVaa() returns null for both payload types (4 ms)
      initial VAA verification failures
        ✓ should return null if VAA emitterChain mismatch (5 ms)
        ✓ should return null if VAA emitterAddress mismatch (7 ms)
        ✓ low consistency level should log warning but pass verification if other checks are ok (7 ms)
        ✓ VAA with consistency level 0 should pass verification and not log MIN_VAA_CONSISTENCY_LEVEL warning (8 ms)
      VAA content verification failures
        ✓ Should return null if VAA protocolName is not TokenBridge (6 ms)
        ✓ should return null if VAA payloadName is not Transfer or TransferWithPayload (5 ms)
      transfer completion issues
        ✓ should return null if tokenBridge.isTransferCompleted() returns false on L1 (10 ms)
        ✓ should return null if l1ChainContext.getTokenBridge() throws an error (4 ms)
        ✓ should return null if L1 tokenBridge.isTransferCompleted() throws an error (5 ms)

  console.log
    [tests/setup.ts] Minimal version - providing mock helpers only

      at Object.<anonymous> (tests/setup.ts:1:9)

  console.log
    [tests/setup.ts] Finished execution (Minimal - SDK mock only)

      at Object.<anonymous> (tests/setup.ts:25:9)

PASS tests/unit/utils/AuditLog.test.ts
  AuditLog
    ✓ appendToAuditLog (spied) is called with correct arguments (72 ms)
    ✓ logDepositCreated calls appendToAuditLog (2 ms)
    ✓ logStatusChange calls appendToAuditLog (2 ms)
    ✓ logDepositInitialized calls appendToAuditLog (1 ms)
    ✓ logDepositFinalized calls appendToAuditLog (2 ms)
    ✓ logDepositDeleted calls appendToAuditLog (1 ms)
    ✓ logApiRequest should call appendToAuditLog with correct parameters (1 ms)
    ✓ logDepositError should call appendToAuditLog with correct parameters (1 ms)

  console.log
    [tests/setup.ts] Minimal version - providing mock helpers only

      at Object.<anonymous> (tests/setup.ts:1:9)

  console.log
    [tests/setup.ts] Finished execution (Minimal - SDK mock only)

      at Object.<anonymous> (tests/setup.ts:25:9)

FAIL tests/e2e/api.test.ts
  ● Test suite failed to run

    Missing required environment variable: CHAIN_SEPOLIATESTNET_PRIVATE_KEY

       9 |     return defaultValue;
      10 |   }
    > 11 |   throw new Error(`Missing required environment variable: ${key}`);
         |         ^
      12 | }
      13 |
      14 | export function getEnvBoolean(key: string, defaultValue?: boolean): boolean {

      at getEnv (utils/Env.ts:11:9)
      at Object.<anonymous> (config/chain/common.chain.ts:14:21)
      at Object.<anonymous> (config/chain/sepolia.chain.ts:4:1)
      at Object.<anonymous> (config/index.ts:9:1)
      at Object.<anonymous> (tests/e2e/api.test.ts:6:1)

Test Suites: 2 failed, 3 passed, 5 total
Tests:       32 failed, 37 passed, 69 total
Snapshots:   0 total
Time:        7.99 s, estimated 9 s
Ran all test suites.
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
